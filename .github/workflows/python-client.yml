name: python

on:
  push:
    branches:
      - master
    tags:
      - "**"
  pull_request: {}

jobs:
  build:
    name: py3.${{ matrix.python-version }} on ${{ matrix.arch }} ${{ matrix.platform || matrix.os }}
    # needs:
    #   - test
    #   - lint
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu
          - macos
          - windows
        python-version:
          - "6"
          - "7"
          - "8"
          - "9"
          - "10"
        arch:
          - x86_64
          - i686
          - aarch64
          - ppc64le
          - s390x
          - x86_64 arm64 universal2
          - x86 AMD64
        include:
          - os: ubuntu
            platform: linux
        exclude:
          - os: macos
            arch: x86_64
          - os: macos
            arch: i686
          - os: macos
            arch: aarch64
          - os: macos
            arch: ppc64le
          - os: macos
            arch: s390x
          - os: macos
            arch: x86 AMD64
          - os: windows
            arch: x86_64
          - os: windows
            arch: i686
          - os: windows
            arch: aarch64
          - os: windows
            arch: ppc64le
          - os: windows
            arch: s390x
          - os: windows
            arch: x86_64 arm64 universal2
          - os: ubuntu
            arch: x86_64 arm64 universal2
          - os: ubuntu
            arch: x86 AMD64
    runs-on: ${{ format('{0}-latest', matrix.os) }}
    steps:
      - uses: actions/checkout@v2

      - name: Set up python
        uses: actions/setup-python@v1
        with:
          python-version: "3.8"

      - name: Set up rust
        if: matrix.os != 'ubuntu'
        uses: actions-rs/toolchain@v1
        with:
          profile: default
          toolchain: stable
          override: true

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Install python dependencies
        run: pip install -U setuptools setuptools-rust wheel twine cibuildwheel

      # - name: Cross compile protoc
      #   if: runner.os == 'Linux'
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y autoconf automake libtool gzip make wget g++ g++-powerpc64le-linux-gnu g++-s390x-linux-gnu git
      #     git clone https://github.com/protocolbuffers/protobuf.git protobuf
      #     cd protobuf
      #     git checkout v3.19.1
      #     git submodule update --init --recursive
      #     ./autogen.sh
      #     cd protoc-artifacts/
      #     ./build-protoc.sh linux ppcle_64 protoc
      #     ./build-protoc.sh linux s390_64 protoc
      #     file target/linux/ppcle_64/protoc.exe
      #     file target/linux/s390_64/protoc.exe
      #     cp target/linux/ppcle_64/protoc.exe $GITHUB_WORKSPACE/ppcle_64_protoc
      #     cp target/linux/s390_64/protoc.exe $GITHUB_WORKSPACE/s390_64_protoc
      #     echo $(realpath target/linux/ppcle_64/protoc.exe)

      - name: Build sdist
        if: matrix.arch== 'x86_64' && matrix.os == 'ubuntu' && matrix.python-version == '8'
        run: |
          pip install -U setuptools-rust
          cd python && python setup.py sdist

      # - name: Build ${{ matrix.platform || matrix.os }} s390x binaries
      #   if: runner.os == 'Linux'
      #   run: cibuildwheel --output-dir dist python
      #   env:
      #     CIBW_BUILD: "cp3${{ matrix.python-version }}-*"
      #     CIBW_ARCHS_LINUX: s390x
      #     CIBW_PLATFORM: ${{ matrix.platform || matrix.os }}
      #     CIBW_TEST_REQUIRES: "pytest"
      #     CIBW_TEST_COMMAND: "pytest {project}/python/tests -s"
      #     CIBW_ENVIRONMENT: 'PATH="$HOME/.cargo/bin:$PATH" PROTOC="$HOME/protobuf/protoc-artifacts/target/linux/s390_64/protoc.exe"'
      #     CIBW_MANYLINUX_X86_64_IMAGE: "manylinux2014"
      #     CIBW_MANYLINUX_I686_IMAGE: "manylinux2014"
      #     CIBW_BEFORE_TEST_LINUX: >
      #       pip install -U pip pipenv setuptools setuptools-rust wheel &&
      #       curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain=stable --profile=default -y &&
      #       rustup show &&
      #       PIPENV_PIPFILE=./python/Pipfile pipenv lock -r > requirements.txt &&
      #       pip install -U -r requirements.txt
      #     CIBW_BEFORE_BUILD_LINUX: >
      #       yum install tree protobuf alsa-lib-devel gcc libffi-devel python-devel openssl openssl-devel -y &&
      #       curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain=stable --profile=default -y &&
      #       rustup show &&
      #       pip install -U pip pipenv setuptools setuptools-rust wheel &&
      #       PIPENV_PIPFILE=./python/Pipfile pipenv lock -r > requirements.txt &&
      #       pip install -U -r requirements.txt &&
      #       rm -r python/disco-src &&
      #       cp -r disco python/disco-src &&
      #       cp -r proto python/proto &&
      #       tree -I 'node_modules|target|build' python

      # - name: Build ${{ matrix.platform || matrix.os }} ppc64le binaries
      #   if: runner.os == 'Linux'
      #   run: cibuildwheel --output-dir dist python
      #   env:
      #     CIBW_BUILD: "cp3${{ matrix.python-version }}-*"
      #     CIBW_ARCHS_LINUX: ppc64le
      #     CIBW_PLATFORM: ${{ matrix.platform || matrix.os }}
      #     CIBW_TEST_REQUIRES: "pytest"
      #     CIBW_TEST_COMMAND: "pytest {project}/python/tests -s"
      #     # CIBW_ENVIRONMENT: 'PATH="$HOME/.cargo/bin:$PATH" PROTOC="/project/ppcle_64_protoc"'
      #     CIBW_ENVIRONMENT: 'PATH="$HOME/.cargo/bin:$PATH"'
      #     CIBW_MANYLINUX_X86_64_IMAGE: "manylinux2014"
      #     CIBW_MANYLINUX_I686_IMAGE: "manylinux2014"
      #     CIBW_BEFORE_TEST_LINUX: >
      #       pip install -U pip pipenv setuptools setuptools-rust wheel &&
      #       curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain=stable --profile=default -y &&
      #       rustup show &&
      #       PIPENV_PIPFILE=./python/Pipfile pipenv lock -r > requirements.txt &&
      #       pip install -U -r requirements.txt
      #     CIBW_BEFORE_BUILD_LINUX: >
      #       yum install tree protobuf protobuf-compiler alsa-lib-devel gcc libffi-devel python-devel openssl openssl-devel -y &&
      #       curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain=stable --profile=default -y &&
      #       rustup show &&
      #       bash python/compile-protoc.sh &&
      #       pip install -U pip pipenv setuptools setuptools-rust wheel &&
      #       PIPENV_PIPFILE=./python/Pipfile pipenv lock -r > requirements.txt &&
      #       pip install -U -r requirements.txt &&
      #       rm -r python/disco-src &&
      #       cp -r disco python/disco-src &&
      #       cp -r proto python/proto &&
      #       tree -I 'node_modules|target|build' python
      
      - name: Configure default build
        run: |
          echo "CIBW_ARCHS_LINUX=x86_64" >> $GITHUB_ENV
          echo "CIBW_ARCHS_MACOS=x86_64" >> $GITHUB_ENV
          echo "CIBW_ARCHS_WINDOWS=x86" >> $GITHUB_ENV

      - name: Configure linux build
        if: matrix.os == 'ubuntu'
        run: echo "CIBW_ARCHS_LINUX=${{ matrix.arch }}" >> $GITHUB_ENV

      - name: Configure macos build
        if: matrix.os == 'macos'
        run: echo "CIBW_ARCHS_MACOS=${{ matrix.arch }}" >> $GITHUB_ENV

      - name: Configure windows build
        if: matrix.os == 'windows'
        run: echo "CIBW_ARCHS_WINDOWS=${{ matrix.arch }}" >> $GITHUB_ENV

      - name: Build summary
        run: |
          echo "CIBW_ARCHS_LINUX: ${{ env.CIBW_ARCHS_LINUX }}"
          echo "CIBW_ARCHS_MACOS: ${{ env.CIBW_ARCHS_MACOS }}"
          echo "CIBW_ARCHS_WINDOWS: ${{ env.CIBW_ARCHS_WINDOWS }}"

      - name: Build ${{ matrix.platform || matrix.os }} ${{ matrix.arch }} wheel
        run: cibuildwheel --output-dir dist python
        env:
          CIBW_BUILD: "cp3${{ matrix.python-version }}-*"
          # CIBW_SKIP: "*-win32"
          # CIBW_ARCHS_LINUX: x86_64 i686 aarch64 ppc64le s390x
          # CIBW_ARCHS_LINUX: ppc64le x86_64 i686 aarch64
          # CIBW_ARCHS_MACOS: x86_64 arm64 universal2
          CIBW_ARCHS_LINUX: ${{ env.CIBW_ARCHS_LINUX }}
          CIBW_ARCHS_MACOS: ${{ env.CIBW_ARCHS_MACOS }}
          CIBW_ARCHS_WINDOWS: ${{ env.CIBW_ARCHS_WINDOWS }}
          CIBW_PLATFORM: ${{ matrix.platform || matrix.os }}
          CIBW_TEST_REQUIRES: "pytest"
          CIBW_TEST_COMMAND: "pytest {project}/python/tests -s"
          CIBW_ENVIRONMENT: 'PATH="$HOME/.cargo/bin:$PATH"'
          CIBW_ENVIRONMENT_WINDOWS: 'PATH="$UserProfile\.cargo\bin;$PATH"'
          # CIBW_MANYLINUX_X86_64_IMAGE: "manylinux2014"
          # CIBW_MANYLINUX_I686_IMAGE: "manylinux2014"
          # CIBW_MANYLINUX_AARCH64_IMAGE: "manylinux2014"
          # CIBW_MANYLINUX_PPC64LE_IMAGE: "manylinux2014"
          # CIBW_MANYLINUX_S390X_IMAGE: "manylinux2014"
          CIBW_MANYLINUX_X86_64_IMAGE: "manylinux_2_24"
          CIBW_MANYLINUX_I686_IMAGE: "manylinux_2_24"
          CIBW_MANYLINUX_AARCH64_IMAGE: "manylinux_2_24"
          CIBW_MANYLINUX_PPC64LE_IMAGE: "manylinux_2_24"
          CIBW_MANYLINUX_S390X_IMAGE: "manylinux_2_24"
          CIBW_BEFORE_TEST_LINUX: >
            pip install -U pip pipenv setuptools setuptools-rust wheel &&
            curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain=stable --profile=default -y &&
            rustup show &&
            PIPENV_PIPFILE=./python/Pipfile pipenv lock -r > requirements.txt &&
            pip install -U -r requirements.txt

          CIBW_BEFORE_BUILD_MACOS: >
            brew install tree protobuf coreutils &&
            rustup target add aarch64-apple-darwin &&
            pip install -U pip pipenv setuptools setuptools-rust wheel &&
            PIPENV_PIPFILE=./python/Pipfile pipenv lock -r > requirements.txt &&
            pip install -U -r requirements.txt &&
            rm -r python/disco-src &&
            cp -r disco python/disco-src &&
            cp -r proto python/proto &&
            tree -I 'node_modules|target|build' python

          CIBW_BEFORE_BUILD_WINDOWS: >
            choco install tree &&
            python -m pip uninstall -y pip &&
            python -m ensurepip &&
            python -m pip install -U pip &&
            pip install -U pip pipenv setuptools setuptools-rust wheel &&
            setx PIPENV_PIPFILE ./python/Pipfile &&
            pipenv lock -r > requirements.txt &&
            pip install -U -r requirements.txt &&
            rm -r python/disco-src &&
            cp -r disco python/disco-src &&
            cp -r proto python/proto

          # yum: alsa-lib-devel libffi-devel python-devel openssl-devel
          CIBW_BEFORE_BUILD_LINUX: >
            apt-get update &&
            apt-get install -y tree gcc openssl &&
            apt-get install -y libasound2 libffi-dev python-dev openssl-dev libssl-dev &&
            curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain=stable --profile=default -y &&
            rustup show &&
            bash python/compile-protoc.sh &&
            pip install -U pip pipenv setuptools setuptools-rust wheel &&
            PIPENV_PIPFILE=./python/Pipfile pipenv lock -r > requirements.txt &&
            pip install -U -r requirements.txt &&
            rm -r python/disco-src &&
            cp -r disco python/disco-src &&
            cp -r proto python/proto &&
            tree -I 'node_modules|target|build' python

      # - name: Build windows 32bit binaries
      #   if: matrix.os == 'windows'
      #   run: cibuildwheel --output-dir dist python
      #   env:
      #     CIBW_BUILD: "cp3${{ matrix.python-version }}-win32"
      #     CIBW_PLATFORM: windows
      #     CIBW_ARCHS_WINDOWS: x86 AMD64
      #     CIBW_TEST_REQUIRES: "pytest"
      #     CIBW_TEST_COMMAND: "pytest {project}/python/tests -s"
      #     CIBW_ENVIRONMENT: 'PATH="$UserProfile\.cargo\bin;$PATH"'
      #     CIBW_BEFORE_BUILD: >
      #       rustup toolchain install nightly-i686-pc-windows-msvc &&
      #       rustup default nightly-i686-pc-windows-msvc &&
      #       rustup override set nightly-i686-pc-windows-msvc &&
      #       rustup show &&
      #       python -m pip uninstall -y pip &&
      #       python -m ensurepip &&
      #       python -m pip install -U pip &&
      #       pip install -U pip pipenv setuptools setuptools-rust wheel &&
      #       setx PIPENV_PIPFILE ./python/Pipfile &&
      #       pipenv lock -r > requirements.txt &&
      #       pip install -U -r requirements.txt &&
      #       rm -r python/disco-src &&
      #       cp -r disco python/disco-src &&
      #       cp -r proto python/proto

      - name: List dist files
        run: ${{ matrix.ls || 'ls -lh' }} dist/

      - name: twine check
        run: twine check dist/*

    # - name: upload to pypi
    #   if: startsWith(github.ref, 'refs/tags/')
    #   run: twine upload dist/*
    #   env:
    #     TWINE_USERNAME: __token__
    #     TWINE_PASSWORD: ${{ secrets.pypi_token }}
