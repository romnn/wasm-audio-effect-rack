syntax = "proto3";
package proto.grpc;

import "google/protobuf/timestamp.proto";
import "proto/audio/analysis/analysis.proto";

service RemoteController {

  // start and stop analyzing audio
  rpc StartAnalysis(StartAnalysisRequest) returns (Empty) {}

  rpc NewInstanceToken(NewInstanceTokenRequest) returns (InstanceToken) {}

  // controller
  /* rpc QueryCurrentVisualization(QueryCurrentVisualizationRequest) */
  /*     returns (Visualization) {} */
  /* rpc RegisterVisualization(RegisterVisualizationRequest) returns (Empty) {}
   */

  // the entire parameterization is happening on the client based on the
  // selected parameterizer but when one controls via the controller, the
  // changes should be live so we also have to upload the entire user input
  // includes: active visualization, active parameterizer, their user defined
  // options (which can be changed e.g. with a midi and then have to be synced)
  // maybe best if all the updates go to the backend and really just the updates
  // that come back trigger something in the viewer such that they really have
  // no shared state whatsoever
}

service RemoteViewer {
  // subscribe and unsubscribe to audio updates
  rpc Subscribe(SubscriptionRequest) returns (stream Update) {}
  rpc Unsubscribe(UnsubscriptionRequest) returns (Empty) {}

  rpc NewInstanceToken(NewInstanceTokenRequest) returns (InstanceToken) {}

  // change subscription
  rpc UpdateSubscription(UpdateSubscriptionRequest) returns (Empty) {}
}

message NewInstanceTokenRequest {}

message InstanceToken { string token = 1; }

message Visualization {}

message QueryCurrentVisualizationRequest {}

message RegisterVisualizationRequest {}

message Empty {}

message Heartbeat { uint64 seq = 1; }

message Update {
  oneof update {
    // todo: add status messages or notifications
    Heartbeat heartbeat = 1;
    proto.audio.analysis.AudioAnalysisResult audio_analysis_result = 2;
  }
}

message DefaultAudioSource {
  // todo
}

message CustomAudioSource {
  // todo
}

message AudioSource {
  oneof source {
    DefaultAudioSource default = 1;
    CustomAudioSource custom = 2;
  }
}

message StartAnalysisRequest {
  /* string user_id = 1; */
  AudioSource audio_source = 10;
}

message UpdateSubscriptionRequest {
  AudioSource audio_source = 1;
  /* string topic = 1; */
}

message SubscriptionRequest { /* string user_id = 1; */
}

message UnsubscriptionRequest { /* string user_id = 1; */
}

/* message Result { */
/*   google.protobuf.Timestamp date = 2; */
/* } */
