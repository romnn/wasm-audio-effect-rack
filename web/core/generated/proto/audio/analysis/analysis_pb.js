// source: proto/audio/analysis/analysis.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var proto_audio_analysis_spectral_pb = require('../../../proto/audio/analysis/spectral_pb.js');
goog.object.extend(proto, proto_audio_analysis_spectral_pb);
var proto_audio_analysis_bpm_pb = require('../../../proto/audio/analysis/bpm_pb.js');
goog.object.extend(proto, proto_audio_analysis_bpm_pb);
goog.exportSymbol('proto.proto.audio.analysis.AudioAnalysisResult', null, global);
goog.exportSymbol('proto.proto.audio.analysis.AudioAnalysisResult.ResultCase', null, global);
goog.exportSymbol('proto.proto.audio.analysis.AudioAnalyzer', null, global);
goog.exportSymbol('proto.proto.audio.analysis.AudioAnalyzer.AnalyzerCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.audio.analysis.AudioAnalysisResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.proto.audio.analysis.AudioAnalysisResult.oneofGroups_);
};
goog.inherits(proto.proto.audio.analysis.AudioAnalysisResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.audio.analysis.AudioAnalysisResult.displayName = 'proto.proto.audio.analysis.AudioAnalysisResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.audio.analysis.AudioAnalyzer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.proto.audio.analysis.AudioAnalyzer.oneofGroups_);
};
goog.inherits(proto.proto.audio.analysis.AudioAnalyzer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.audio.analysis.AudioAnalyzer.displayName = 'proto.proto.audio.analysis.AudioAnalyzer';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.proto.audio.analysis.AudioAnalysisResult.oneofGroups_ = [[100,101]];

/**
 * @enum {number}
 */
proto.proto.audio.analysis.AudioAnalysisResult.ResultCase = {
  RESULT_NOT_SET: 0,
  SPECTRAL: 100,
  BPM: 101
};

/**
 * @return {proto.proto.audio.analysis.AudioAnalysisResult.ResultCase}
 */
proto.proto.audio.analysis.AudioAnalysisResult.prototype.getResultCase = function() {
  return /** @type {proto.proto.audio.analysis.AudioAnalysisResult.ResultCase} */(jspb.Message.computeOneofCase(this, proto.proto.audio.analysis.AudioAnalysisResult.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.audio.analysis.AudioAnalysisResult.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.audio.analysis.AudioAnalysisResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.audio.analysis.AudioAnalysisResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.audio.analysis.AudioAnalysisResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    seqNum: jspb.Message.getFieldWithDefault(msg, 1, 0),
    windowSize: jspb.Message.getFieldWithDefault(msg, 2, 0),
    spectral: (f = msg.getSpectral()) && proto_audio_analysis_spectral_pb.SpectralAudioAnalysisResult.toObject(includeInstance, f),
    bpm: (f = msg.getBpm()) && proto_audio_analysis_bpm_pb.BpmDetectionAudioAnalysisResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.audio.analysis.AudioAnalysisResult}
 */
proto.proto.audio.analysis.AudioAnalysisResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.audio.analysis.AudioAnalysisResult;
  return proto.proto.audio.analysis.AudioAnalysisResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.audio.analysis.AudioAnalysisResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.audio.analysis.AudioAnalysisResult}
 */
proto.proto.audio.analysis.AudioAnalysisResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSeqNum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWindowSize(value);
      break;
    case 100:
      var value = new proto_audio_analysis_spectral_pb.SpectralAudioAnalysisResult;
      reader.readMessage(value,proto_audio_analysis_spectral_pb.SpectralAudioAnalysisResult.deserializeBinaryFromReader);
      msg.setSpectral(value);
      break;
    case 101:
      var value = new proto_audio_analysis_bpm_pb.BpmDetectionAudioAnalysisResult;
      reader.readMessage(value,proto_audio_analysis_bpm_pb.BpmDetectionAudioAnalysisResult.deserializeBinaryFromReader);
      msg.setBpm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.audio.analysis.AudioAnalysisResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.audio.analysis.AudioAnalysisResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.audio.analysis.AudioAnalysisResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.audio.analysis.AudioAnalysisResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeqNum();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getWindowSize();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getSpectral();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto_audio_analysis_spectral_pb.SpectralAudioAnalysisResult.serializeBinaryToWriter
    );
  }
  f = message.getBpm();
  if (f != null) {
    writer.writeMessage(
      101,
      f,
      proto_audio_analysis_bpm_pb.BpmDetectionAudioAnalysisResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 seq_num = 1;
 * @return {number}
 */
proto.proto.audio.analysis.AudioAnalysisResult.prototype.getSeqNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.audio.analysis.AudioAnalysisResult} returns this
 */
proto.proto.audio.analysis.AudioAnalysisResult.prototype.setSeqNum = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 window_size = 2;
 * @return {number}
 */
proto.proto.audio.analysis.AudioAnalysisResult.prototype.getWindowSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.audio.analysis.AudioAnalysisResult} returns this
 */
proto.proto.audio.analysis.AudioAnalysisResult.prototype.setWindowSize = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional SpectralAudioAnalysisResult spectral = 100;
 * @return {?proto.proto.audio.analysis.SpectralAudioAnalysisResult}
 */
proto.proto.audio.analysis.AudioAnalysisResult.prototype.getSpectral = function() {
  return /** @type{?proto.proto.audio.analysis.SpectralAudioAnalysisResult} */ (
    jspb.Message.getWrapperField(this, proto_audio_analysis_spectral_pb.SpectralAudioAnalysisResult, 100));
};


/**
 * @param {?proto.proto.audio.analysis.SpectralAudioAnalysisResult|undefined} value
 * @return {!proto.proto.audio.analysis.AudioAnalysisResult} returns this
*/
proto.proto.audio.analysis.AudioAnalysisResult.prototype.setSpectral = function(value) {
  return jspb.Message.setOneofWrapperField(this, 100, proto.proto.audio.analysis.AudioAnalysisResult.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.audio.analysis.AudioAnalysisResult} returns this
 */
proto.proto.audio.analysis.AudioAnalysisResult.prototype.clearSpectral = function() {
  return this.setSpectral(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.audio.analysis.AudioAnalysisResult.prototype.hasSpectral = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * optional BpmDetectionAudioAnalysisResult bpm = 101;
 * @return {?proto.proto.audio.analysis.BpmDetectionAudioAnalysisResult}
 */
proto.proto.audio.analysis.AudioAnalysisResult.prototype.getBpm = function() {
  return /** @type{?proto.proto.audio.analysis.BpmDetectionAudioAnalysisResult} */ (
    jspb.Message.getWrapperField(this, proto_audio_analysis_bpm_pb.BpmDetectionAudioAnalysisResult, 101));
};


/**
 * @param {?proto.proto.audio.analysis.BpmDetectionAudioAnalysisResult|undefined} value
 * @return {!proto.proto.audio.analysis.AudioAnalysisResult} returns this
*/
proto.proto.audio.analysis.AudioAnalysisResult.prototype.setBpm = function(value) {
  return jspb.Message.setOneofWrapperField(this, 101, proto.proto.audio.analysis.AudioAnalysisResult.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.audio.analysis.AudioAnalysisResult} returns this
 */
proto.proto.audio.analysis.AudioAnalysisResult.prototype.clearBpm = function() {
  return this.setBpm(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.audio.analysis.AudioAnalysisResult.prototype.hasBpm = function() {
  return jspb.Message.getField(this, 101) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.proto.audio.analysis.AudioAnalyzer.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.proto.audio.analysis.AudioAnalyzer.AnalyzerCase = {
  ANALYZER_NOT_SET: 0,
  SPECTRAL: 1,
  BPM: 2
};

/**
 * @return {proto.proto.audio.analysis.AudioAnalyzer.AnalyzerCase}
 */
proto.proto.audio.analysis.AudioAnalyzer.prototype.getAnalyzerCase = function() {
  return /** @type {proto.proto.audio.analysis.AudioAnalyzer.AnalyzerCase} */(jspb.Message.computeOneofCase(this, proto.proto.audio.analysis.AudioAnalyzer.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.audio.analysis.AudioAnalyzer.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.audio.analysis.AudioAnalyzer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.audio.analysis.AudioAnalyzer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.audio.analysis.AudioAnalyzer.toObject = function(includeInstance, msg) {
  var f, obj = {
    spectral: (f = msg.getSpectral()) && proto_audio_analysis_spectral_pb.SpectralAudioAnalyzer.toObject(includeInstance, f),
    bpm: (f = msg.getBpm()) && proto_audio_analysis_bpm_pb.BpmDetectionAudioAnalyzer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.audio.analysis.AudioAnalyzer}
 */
proto.proto.audio.analysis.AudioAnalyzer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.audio.analysis.AudioAnalyzer;
  return proto.proto.audio.analysis.AudioAnalyzer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.audio.analysis.AudioAnalyzer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.audio.analysis.AudioAnalyzer}
 */
proto.proto.audio.analysis.AudioAnalyzer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_audio_analysis_spectral_pb.SpectralAudioAnalyzer;
      reader.readMessage(value,proto_audio_analysis_spectral_pb.SpectralAudioAnalyzer.deserializeBinaryFromReader);
      msg.setSpectral(value);
      break;
    case 2:
      var value = new proto_audio_analysis_bpm_pb.BpmDetectionAudioAnalyzer;
      reader.readMessage(value,proto_audio_analysis_bpm_pb.BpmDetectionAudioAnalyzer.deserializeBinaryFromReader);
      msg.setBpm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.audio.analysis.AudioAnalyzer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.audio.analysis.AudioAnalyzer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.audio.analysis.AudioAnalyzer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.audio.analysis.AudioAnalyzer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpectral();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_audio_analysis_spectral_pb.SpectralAudioAnalyzer.serializeBinaryToWriter
    );
  }
  f = message.getBpm();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto_audio_analysis_bpm_pb.BpmDetectionAudioAnalyzer.serializeBinaryToWriter
    );
  }
};


/**
 * optional SpectralAudioAnalyzer spectral = 1;
 * @return {?proto.proto.audio.analysis.SpectralAudioAnalyzer}
 */
proto.proto.audio.analysis.AudioAnalyzer.prototype.getSpectral = function() {
  return /** @type{?proto.proto.audio.analysis.SpectralAudioAnalyzer} */ (
    jspb.Message.getWrapperField(this, proto_audio_analysis_spectral_pb.SpectralAudioAnalyzer, 1));
};


/**
 * @param {?proto.proto.audio.analysis.SpectralAudioAnalyzer|undefined} value
 * @return {!proto.proto.audio.analysis.AudioAnalyzer} returns this
*/
proto.proto.audio.analysis.AudioAnalyzer.prototype.setSpectral = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.proto.audio.analysis.AudioAnalyzer.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.audio.analysis.AudioAnalyzer} returns this
 */
proto.proto.audio.analysis.AudioAnalyzer.prototype.clearSpectral = function() {
  return this.setSpectral(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.audio.analysis.AudioAnalyzer.prototype.hasSpectral = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BpmDetectionAudioAnalyzer bpm = 2;
 * @return {?proto.proto.audio.analysis.BpmDetectionAudioAnalyzer}
 */
proto.proto.audio.analysis.AudioAnalyzer.prototype.getBpm = function() {
  return /** @type{?proto.proto.audio.analysis.BpmDetectionAudioAnalyzer} */ (
    jspb.Message.getWrapperField(this, proto_audio_analysis_bpm_pb.BpmDetectionAudioAnalyzer, 2));
};


/**
 * @param {?proto.proto.audio.analysis.BpmDetectionAudioAnalyzer|undefined} value
 * @return {!proto.proto.audio.analysis.AudioAnalyzer} returns this
*/
proto.proto.audio.analysis.AudioAnalyzer.prototype.setBpm = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.proto.audio.analysis.AudioAnalyzer.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.audio.analysis.AudioAnalyzer} returns this
 */
proto.proto.audio.analysis.AudioAnalyzer.prototype.clearBpm = function() {
  return this.setBpm(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.audio.analysis.AudioAnalyzer.prototype.hasBpm = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.proto.audio.analysis);
