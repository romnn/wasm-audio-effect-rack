// source: proto/grpc/controller.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var proto_audio_analysis_analysis_pb = require('../../proto/audio/analysis/analysis_pb.js');
goog.object.extend(proto, proto_audio_analysis_analysis_pb);
var proto_grpc_connection_pb = require('../../proto/grpc/connection_pb.js');
goog.object.extend(proto, proto_grpc_connection_pb);
var proto_grpc_session_pb = require('../../proto/grpc/session_pb.js');
goog.object.extend(proto, proto_grpc_session_pb);
var proto_grpc_descriptors_pb = require('../../proto/grpc/descriptors_pb.js');
goog.object.extend(proto, proto_grpc_descriptors_pb);
var proto_grpc_remote_pb = require('../../proto/grpc/remote_pb.js');
goog.object.extend(proto, proto_grpc_remote_pb);
goog.exportSymbol('proto.proto.grpc.AddAudioAnalyzerRequest', null, global);
goog.exportSymbol('proto.proto.grpc.AddAudioInputStreamRequest', null, global);
goog.exportSymbol('proto.proto.grpc.AddAudioOutputStreamRequest', null, global);
goog.exportSymbol('proto.proto.grpc.ConnectLightsToAudioAnalyzerRequest', null, global);
goog.exportSymbol('proto.proto.grpc.ControllerConnectRequest', null, global);
goog.exportSymbol('proto.proto.grpc.ControllerDisconnectRequest', null, global);
goog.exportSymbol('proto.proto.grpc.ControllerUpdate', null, global);
goog.exportSymbol('proto.proto.grpc.ControllerUpdate.UpdateCase', null, global);
goog.exportSymbol('proto.proto.grpc.GetSessionsRequest', null, global);
goog.exportSymbol('proto.proto.grpc.SubscribeToAudioAnalyzerRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.grpc.GetSessionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.grpc.GetSessionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.grpc.GetSessionsRequest.displayName = 'proto.proto.grpc.GetSessionsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.grpc.ControllerUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.proto.grpc.ControllerUpdate.oneofGroups_);
};
goog.inherits(proto.proto.grpc.ControllerUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.grpc.ControllerUpdate.displayName = 'proto.proto.grpc.ControllerUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.grpc.SubscribeToAudioAnalyzerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.grpc.SubscribeToAudioAnalyzerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.grpc.SubscribeToAudioAnalyzerRequest.displayName = 'proto.proto.grpc.SubscribeToAudioAnalyzerRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.grpc.ConnectLightsToAudioAnalyzerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.grpc.ConnectLightsToAudioAnalyzerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.grpc.ConnectLightsToAudioAnalyzerRequest.displayName = 'proto.proto.grpc.ConnectLightsToAudioAnalyzerRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.grpc.AddAudioInputStreamRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.grpc.AddAudioInputStreamRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.grpc.AddAudioInputStreamRequest.displayName = 'proto.proto.grpc.AddAudioInputStreamRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.grpc.AddAudioAnalyzerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.grpc.AddAudioAnalyzerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.grpc.AddAudioAnalyzerRequest.displayName = 'proto.proto.grpc.AddAudioAnalyzerRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.grpc.AddAudioOutputStreamRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.grpc.AddAudioOutputStreamRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.grpc.AddAudioOutputStreamRequest.displayName = 'proto.proto.grpc.AddAudioOutputStreamRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.grpc.ControllerConnectRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.grpc.ControllerConnectRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.grpc.ControllerConnectRequest.displayName = 'proto.proto.grpc.ControllerConnectRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.grpc.ControllerDisconnectRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.grpc.ControllerDisconnectRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.grpc.ControllerDisconnectRequest.displayName = 'proto.proto.grpc.ControllerDisconnectRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.grpc.GetSessionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.grpc.GetSessionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.grpc.GetSessionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.GetSessionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.grpc.GetSessionsRequest}
 */
proto.proto.grpc.GetSessionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.grpc.GetSessionsRequest;
  return proto.proto.grpc.GetSessionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.grpc.GetSessionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.grpc.GetSessionsRequest}
 */
proto.proto.grpc.GetSessionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.grpc.GetSessionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.grpc.GetSessionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.grpc.GetSessionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.GetSessionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.proto.grpc.ControllerUpdate.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.proto.grpc.ControllerUpdate.UpdateCase = {
  UPDATE_NOT_SET: 0,
  HEARTBEAT: 1,
  ASSIGNMENT: 2
};

/**
 * @return {proto.proto.grpc.ControllerUpdate.UpdateCase}
 */
proto.proto.grpc.ControllerUpdate.prototype.getUpdateCase = function() {
  return /** @type {proto.proto.grpc.ControllerUpdate.UpdateCase} */(jspb.Message.computeOneofCase(this, proto.proto.grpc.ControllerUpdate.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.grpc.ControllerUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.grpc.ControllerUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.grpc.ControllerUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.ControllerUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    heartbeat: (f = msg.getHeartbeat()) && proto_grpc_connection_pb.Heartbeat.toObject(includeInstance, f),
    assignment: (f = msg.getAssignment()) && proto_grpc_session_pb.Assignment.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.grpc.ControllerUpdate}
 */
proto.proto.grpc.ControllerUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.grpc.ControllerUpdate;
  return proto.proto.grpc.ControllerUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.grpc.ControllerUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.grpc.ControllerUpdate}
 */
proto.proto.grpc.ControllerUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_grpc_connection_pb.Heartbeat;
      reader.readMessage(value,proto_grpc_connection_pb.Heartbeat.deserializeBinaryFromReader);
      msg.setHeartbeat(value);
      break;
    case 2:
      var value = new proto_grpc_session_pb.Assignment;
      reader.readMessage(value,proto_grpc_session_pb.Assignment.deserializeBinaryFromReader);
      msg.setAssignment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.grpc.ControllerUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.grpc.ControllerUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.grpc.ControllerUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.ControllerUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeartbeat();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_grpc_connection_pb.Heartbeat.serializeBinaryToWriter
    );
  }
  f = message.getAssignment();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto_grpc_session_pb.Assignment.serializeBinaryToWriter
    );
  }
};


/**
 * optional Heartbeat heartbeat = 1;
 * @return {?proto.proto.grpc.Heartbeat}
 */
proto.proto.grpc.ControllerUpdate.prototype.getHeartbeat = function() {
  return /** @type{?proto.proto.grpc.Heartbeat} */ (
    jspb.Message.getWrapperField(this, proto_grpc_connection_pb.Heartbeat, 1));
};


/**
 * @param {?proto.proto.grpc.Heartbeat|undefined} value
 * @return {!proto.proto.grpc.ControllerUpdate} returns this
*/
proto.proto.grpc.ControllerUpdate.prototype.setHeartbeat = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.proto.grpc.ControllerUpdate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.grpc.ControllerUpdate} returns this
 */
proto.proto.grpc.ControllerUpdate.prototype.clearHeartbeat = function() {
  return this.setHeartbeat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.grpc.ControllerUpdate.prototype.hasHeartbeat = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Assignment assignment = 2;
 * @return {?proto.proto.grpc.Assignment}
 */
proto.proto.grpc.ControllerUpdate.prototype.getAssignment = function() {
  return /** @type{?proto.proto.grpc.Assignment} */ (
    jspb.Message.getWrapperField(this, proto_grpc_session_pb.Assignment, 2));
};


/**
 * @param {?proto.proto.grpc.Assignment|undefined} value
 * @return {!proto.proto.grpc.ControllerUpdate} returns this
*/
proto.proto.grpc.ControllerUpdate.prototype.setAssignment = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.proto.grpc.ControllerUpdate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.grpc.ControllerUpdate} returns this
 */
proto.proto.grpc.ControllerUpdate.prototype.clearAssignment = function() {
  return this.setAssignment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.grpc.ControllerUpdate.prototype.hasAssignment = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.grpc.SubscribeToAudioAnalyzerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.grpc.SubscribeToAudioAnalyzerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.grpc.SubscribeToAudioAnalyzerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.SubscribeToAudioAnalyzerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    instanceId: (f = msg.getInstanceId()) && proto_grpc_session_pb.InstanceId.toObject(includeInstance, f),
    audioAnalyzerDescriptor: (f = msg.getAudioAnalyzerDescriptor()) && proto_grpc_descriptors_pb.AudioAnalyzerDescriptor.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.grpc.SubscribeToAudioAnalyzerRequest}
 */
proto.proto.grpc.SubscribeToAudioAnalyzerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.grpc.SubscribeToAudioAnalyzerRequest;
  return proto.proto.grpc.SubscribeToAudioAnalyzerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.grpc.SubscribeToAudioAnalyzerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.grpc.SubscribeToAudioAnalyzerRequest}
 */
proto.proto.grpc.SubscribeToAudioAnalyzerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_grpc_session_pb.InstanceId;
      reader.readMessage(value,proto_grpc_session_pb.InstanceId.deserializeBinaryFromReader);
      msg.setInstanceId(value);
      break;
    case 10:
      var value = new proto_grpc_descriptors_pb.AudioAnalyzerDescriptor;
      reader.readMessage(value,proto_grpc_descriptors_pb.AudioAnalyzerDescriptor.deserializeBinaryFromReader);
      msg.setAudioAnalyzerDescriptor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.grpc.SubscribeToAudioAnalyzerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.grpc.SubscribeToAudioAnalyzerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.grpc.SubscribeToAudioAnalyzerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.SubscribeToAudioAnalyzerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstanceId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_grpc_session_pb.InstanceId.serializeBinaryToWriter
    );
  }
  f = message.getAudioAnalyzerDescriptor();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto_grpc_descriptors_pb.AudioAnalyzerDescriptor.serializeBinaryToWriter
    );
  }
};


/**
 * optional InstanceId instance_id = 1;
 * @return {?proto.proto.grpc.InstanceId}
 */
proto.proto.grpc.SubscribeToAudioAnalyzerRequest.prototype.getInstanceId = function() {
  return /** @type{?proto.proto.grpc.InstanceId} */ (
    jspb.Message.getWrapperField(this, proto_grpc_session_pb.InstanceId, 1));
};


/**
 * @param {?proto.proto.grpc.InstanceId|undefined} value
 * @return {!proto.proto.grpc.SubscribeToAudioAnalyzerRequest} returns this
*/
proto.proto.grpc.SubscribeToAudioAnalyzerRequest.prototype.setInstanceId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.grpc.SubscribeToAudioAnalyzerRequest} returns this
 */
proto.proto.grpc.SubscribeToAudioAnalyzerRequest.prototype.clearInstanceId = function() {
  return this.setInstanceId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.grpc.SubscribeToAudioAnalyzerRequest.prototype.hasInstanceId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AudioAnalyzerDescriptor audio_analyzer_descriptor = 10;
 * @return {?proto.proto.grpc.AudioAnalyzerDescriptor}
 */
proto.proto.grpc.SubscribeToAudioAnalyzerRequest.prototype.getAudioAnalyzerDescriptor = function() {
  return /** @type{?proto.proto.grpc.AudioAnalyzerDescriptor} */ (
    jspb.Message.getWrapperField(this, proto_grpc_descriptors_pb.AudioAnalyzerDescriptor, 10));
};


/**
 * @param {?proto.proto.grpc.AudioAnalyzerDescriptor|undefined} value
 * @return {!proto.proto.grpc.SubscribeToAudioAnalyzerRequest} returns this
*/
proto.proto.grpc.SubscribeToAudioAnalyzerRequest.prototype.setAudioAnalyzerDescriptor = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.grpc.SubscribeToAudioAnalyzerRequest} returns this
 */
proto.proto.grpc.SubscribeToAudioAnalyzerRequest.prototype.clearAudioAnalyzerDescriptor = function() {
  return this.setAudioAnalyzerDescriptor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.grpc.SubscribeToAudioAnalyzerRequest.prototype.hasAudioAnalyzerDescriptor = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.grpc.ConnectLightsToAudioAnalyzerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.grpc.ConnectLightsToAudioAnalyzerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.grpc.ConnectLightsToAudioAnalyzerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.ConnectLightsToAudioAnalyzerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    lights: (f = msg.getLights()) && proto_grpc_remote_pb.Lights.toObject(includeInstance, f),
    audioAnalyzerDescriptor: (f = msg.getAudioAnalyzerDescriptor()) && proto_grpc_descriptors_pb.AudioAnalyzerDescriptor.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.grpc.ConnectLightsToAudioAnalyzerRequest}
 */
proto.proto.grpc.ConnectLightsToAudioAnalyzerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.grpc.ConnectLightsToAudioAnalyzerRequest;
  return proto.proto.grpc.ConnectLightsToAudioAnalyzerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.grpc.ConnectLightsToAudioAnalyzerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.grpc.ConnectLightsToAudioAnalyzerRequest}
 */
proto.proto.grpc.ConnectLightsToAudioAnalyzerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_grpc_remote_pb.Lights;
      reader.readMessage(value,proto_grpc_remote_pb.Lights.deserializeBinaryFromReader);
      msg.setLights(value);
      break;
    case 10:
      var value = new proto_grpc_descriptors_pb.AudioAnalyzerDescriptor;
      reader.readMessage(value,proto_grpc_descriptors_pb.AudioAnalyzerDescriptor.deserializeBinaryFromReader);
      msg.setAudioAnalyzerDescriptor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.grpc.ConnectLightsToAudioAnalyzerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.grpc.ConnectLightsToAudioAnalyzerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.grpc.ConnectLightsToAudioAnalyzerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.ConnectLightsToAudioAnalyzerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLights();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_grpc_remote_pb.Lights.serializeBinaryToWriter
    );
  }
  f = message.getAudioAnalyzerDescriptor();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto_grpc_descriptors_pb.AudioAnalyzerDescriptor.serializeBinaryToWriter
    );
  }
};


/**
 * optional Lights lights = 1;
 * @return {?proto.proto.grpc.Lights}
 */
proto.proto.grpc.ConnectLightsToAudioAnalyzerRequest.prototype.getLights = function() {
  return /** @type{?proto.proto.grpc.Lights} */ (
    jspb.Message.getWrapperField(this, proto_grpc_remote_pb.Lights, 1));
};


/**
 * @param {?proto.proto.grpc.Lights|undefined} value
 * @return {!proto.proto.grpc.ConnectLightsToAudioAnalyzerRequest} returns this
*/
proto.proto.grpc.ConnectLightsToAudioAnalyzerRequest.prototype.setLights = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.grpc.ConnectLightsToAudioAnalyzerRequest} returns this
 */
proto.proto.grpc.ConnectLightsToAudioAnalyzerRequest.prototype.clearLights = function() {
  return this.setLights(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.grpc.ConnectLightsToAudioAnalyzerRequest.prototype.hasLights = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AudioAnalyzerDescriptor audio_analyzer_descriptor = 10;
 * @return {?proto.proto.grpc.AudioAnalyzerDescriptor}
 */
proto.proto.grpc.ConnectLightsToAudioAnalyzerRequest.prototype.getAudioAnalyzerDescriptor = function() {
  return /** @type{?proto.proto.grpc.AudioAnalyzerDescriptor} */ (
    jspb.Message.getWrapperField(this, proto_grpc_descriptors_pb.AudioAnalyzerDescriptor, 10));
};


/**
 * @param {?proto.proto.grpc.AudioAnalyzerDescriptor|undefined} value
 * @return {!proto.proto.grpc.ConnectLightsToAudioAnalyzerRequest} returns this
*/
proto.proto.grpc.ConnectLightsToAudioAnalyzerRequest.prototype.setAudioAnalyzerDescriptor = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.grpc.ConnectLightsToAudioAnalyzerRequest} returns this
 */
proto.proto.grpc.ConnectLightsToAudioAnalyzerRequest.prototype.clearAudioAnalyzerDescriptor = function() {
  return this.setAudioAnalyzerDescriptor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.grpc.ConnectLightsToAudioAnalyzerRequest.prototype.hasAudioAnalyzerDescriptor = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.grpc.AddAudioInputStreamRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.grpc.AddAudioInputStreamRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.grpc.AddAudioInputStreamRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.AddAudioInputStreamRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.grpc.AddAudioInputStreamRequest}
 */
proto.proto.grpc.AddAudioInputStreamRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.grpc.AddAudioInputStreamRequest;
  return proto.proto.grpc.AddAudioInputStreamRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.grpc.AddAudioInputStreamRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.grpc.AddAudioInputStreamRequest}
 */
proto.proto.grpc.AddAudioInputStreamRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.grpc.AddAudioInputStreamRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.grpc.AddAudioInputStreamRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.grpc.AddAudioInputStreamRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.AddAudioInputStreamRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.grpc.AddAudioAnalyzerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.grpc.AddAudioAnalyzerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.grpc.AddAudioAnalyzerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.AddAudioAnalyzerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    analyzer: (f = msg.getAnalyzer()) && proto_audio_analysis_analysis_pb.AudioAnalyzer.toObject(includeInstance, f),
    inputDescriptor: (f = msg.getInputDescriptor()) && proto_grpc_descriptors_pb.AudioInputDescriptor.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.grpc.AddAudioAnalyzerRequest}
 */
proto.proto.grpc.AddAudioAnalyzerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.grpc.AddAudioAnalyzerRequest;
  return proto.proto.grpc.AddAudioAnalyzerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.grpc.AddAudioAnalyzerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.grpc.AddAudioAnalyzerRequest}
 */
proto.proto.grpc.AddAudioAnalyzerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_audio_analysis_analysis_pb.AudioAnalyzer;
      reader.readMessage(value,proto_audio_analysis_analysis_pb.AudioAnalyzer.deserializeBinaryFromReader);
      msg.setAnalyzer(value);
      break;
    case 10:
      var value = new proto_grpc_descriptors_pb.AudioInputDescriptor;
      reader.readMessage(value,proto_grpc_descriptors_pb.AudioInputDescriptor.deserializeBinaryFromReader);
      msg.setInputDescriptor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.grpc.AddAudioAnalyzerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.grpc.AddAudioAnalyzerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.grpc.AddAudioAnalyzerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.AddAudioAnalyzerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnalyzer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_audio_analysis_analysis_pb.AudioAnalyzer.serializeBinaryToWriter
    );
  }
  f = message.getInputDescriptor();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto_grpc_descriptors_pb.AudioInputDescriptor.serializeBinaryToWriter
    );
  }
};


/**
 * optional proto.audio.analysis.AudioAnalyzer analyzer = 1;
 * @return {?proto.proto.audio.analysis.AudioAnalyzer}
 */
proto.proto.grpc.AddAudioAnalyzerRequest.prototype.getAnalyzer = function() {
  return /** @type{?proto.proto.audio.analysis.AudioAnalyzer} */ (
    jspb.Message.getWrapperField(this, proto_audio_analysis_analysis_pb.AudioAnalyzer, 1));
};


/**
 * @param {?proto.proto.audio.analysis.AudioAnalyzer|undefined} value
 * @return {!proto.proto.grpc.AddAudioAnalyzerRequest} returns this
*/
proto.proto.grpc.AddAudioAnalyzerRequest.prototype.setAnalyzer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.grpc.AddAudioAnalyzerRequest} returns this
 */
proto.proto.grpc.AddAudioAnalyzerRequest.prototype.clearAnalyzer = function() {
  return this.setAnalyzer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.grpc.AddAudioAnalyzerRequest.prototype.hasAnalyzer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AudioInputDescriptor input_descriptor = 10;
 * @return {?proto.proto.grpc.AudioInputDescriptor}
 */
proto.proto.grpc.AddAudioAnalyzerRequest.prototype.getInputDescriptor = function() {
  return /** @type{?proto.proto.grpc.AudioInputDescriptor} */ (
    jspb.Message.getWrapperField(this, proto_grpc_descriptors_pb.AudioInputDescriptor, 10));
};


/**
 * @param {?proto.proto.grpc.AudioInputDescriptor|undefined} value
 * @return {!proto.proto.grpc.AddAudioAnalyzerRequest} returns this
*/
proto.proto.grpc.AddAudioAnalyzerRequest.prototype.setInputDescriptor = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.grpc.AddAudioAnalyzerRequest} returns this
 */
proto.proto.grpc.AddAudioAnalyzerRequest.prototype.clearInputDescriptor = function() {
  return this.setInputDescriptor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.grpc.AddAudioAnalyzerRequest.prototype.hasInputDescriptor = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.grpc.AddAudioOutputStreamRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.grpc.AddAudioOutputStreamRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.grpc.AddAudioOutputStreamRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.AddAudioOutputStreamRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    inputDescriptor: (f = msg.getInputDescriptor()) && proto_grpc_descriptors_pb.AudioInputDescriptor.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.grpc.AddAudioOutputStreamRequest}
 */
proto.proto.grpc.AddAudioOutputStreamRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.grpc.AddAudioOutputStreamRequest;
  return proto.proto.grpc.AddAudioOutputStreamRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.grpc.AddAudioOutputStreamRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.grpc.AddAudioOutputStreamRequest}
 */
proto.proto.grpc.AddAudioOutputStreamRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_grpc_descriptors_pb.AudioInputDescriptor;
      reader.readMessage(value,proto_grpc_descriptors_pb.AudioInputDescriptor.deserializeBinaryFromReader);
      msg.setInputDescriptor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.grpc.AddAudioOutputStreamRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.grpc.AddAudioOutputStreamRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.grpc.AddAudioOutputStreamRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.AddAudioOutputStreamRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInputDescriptor();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_grpc_descriptors_pb.AudioInputDescriptor.serializeBinaryToWriter
    );
  }
};


/**
 * optional AudioInputDescriptor input_descriptor = 1;
 * @return {?proto.proto.grpc.AudioInputDescriptor}
 */
proto.proto.grpc.AddAudioOutputStreamRequest.prototype.getInputDescriptor = function() {
  return /** @type{?proto.proto.grpc.AudioInputDescriptor} */ (
    jspb.Message.getWrapperField(this, proto_grpc_descriptors_pb.AudioInputDescriptor, 1));
};


/**
 * @param {?proto.proto.grpc.AudioInputDescriptor|undefined} value
 * @return {!proto.proto.grpc.AddAudioOutputStreamRequest} returns this
*/
proto.proto.grpc.AddAudioOutputStreamRequest.prototype.setInputDescriptor = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.grpc.AddAudioOutputStreamRequest} returns this
 */
proto.proto.grpc.AddAudioOutputStreamRequest.prototype.clearInputDescriptor = function() {
  return this.setInputDescriptor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.grpc.AddAudioOutputStreamRequest.prototype.hasInputDescriptor = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.grpc.ControllerConnectRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.grpc.ControllerConnectRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.grpc.ControllerConnectRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.ControllerConnectRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    instance: (f = msg.getInstance()) && proto_grpc_session_pb.InstanceId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.grpc.ControllerConnectRequest}
 */
proto.proto.grpc.ControllerConnectRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.grpc.ControllerConnectRequest;
  return proto.proto.grpc.ControllerConnectRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.grpc.ControllerConnectRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.grpc.ControllerConnectRequest}
 */
proto.proto.grpc.ControllerConnectRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_grpc_session_pb.InstanceId;
      reader.readMessage(value,proto_grpc_session_pb.InstanceId.deserializeBinaryFromReader);
      msg.setInstance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.grpc.ControllerConnectRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.grpc.ControllerConnectRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.grpc.ControllerConnectRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.ControllerConnectRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstance();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_grpc_session_pb.InstanceId.serializeBinaryToWriter
    );
  }
};


/**
 * optional InstanceId instance = 1;
 * @return {?proto.proto.grpc.InstanceId}
 */
proto.proto.grpc.ControllerConnectRequest.prototype.getInstance = function() {
  return /** @type{?proto.proto.grpc.InstanceId} */ (
    jspb.Message.getWrapperField(this, proto_grpc_session_pb.InstanceId, 1));
};


/**
 * @param {?proto.proto.grpc.InstanceId|undefined} value
 * @return {!proto.proto.grpc.ControllerConnectRequest} returns this
*/
proto.proto.grpc.ControllerConnectRequest.prototype.setInstance = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.grpc.ControllerConnectRequest} returns this
 */
proto.proto.grpc.ControllerConnectRequest.prototype.clearInstance = function() {
  return this.setInstance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.grpc.ControllerConnectRequest.prototype.hasInstance = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.grpc.ControllerDisconnectRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.grpc.ControllerDisconnectRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.grpc.ControllerDisconnectRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.ControllerDisconnectRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.grpc.ControllerDisconnectRequest}
 */
proto.proto.grpc.ControllerDisconnectRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.grpc.ControllerDisconnectRequest;
  return proto.proto.grpc.ControllerDisconnectRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.grpc.ControllerDisconnectRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.grpc.ControllerDisconnectRequest}
 */
proto.proto.grpc.ControllerDisconnectRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.grpc.ControllerDisconnectRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.grpc.ControllerDisconnectRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.grpc.ControllerDisconnectRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.ControllerDisconnectRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.proto.grpc);
