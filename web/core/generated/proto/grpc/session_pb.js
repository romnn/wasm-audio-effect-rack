// source: proto/grpc/session.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.proto.grpc.Assignment', null, global);
goog.exportSymbol('proto.proto.grpc.ControllerInstanceInfo', null, global);
goog.exportSymbol('proto.proto.grpc.InstanceId', null, global);
goog.exportSymbol('proto.proto.grpc.InstanceInfo', null, global);
goog.exportSymbol('proto.proto.grpc.InstanceState', null, global);
goog.exportSymbol('proto.proto.grpc.InstanceSubscriptions', null, global);
goog.exportSymbol('proto.proto.grpc.SessionInfo', null, global);
goog.exportSymbol('proto.proto.grpc.SessionToken', null, global);
goog.exportSymbol('proto.proto.grpc.Sessions', null, global);
goog.exportSymbol('proto.proto.grpc.ViewerInstanceInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.grpc.Assignment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.grpc.Assignment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.grpc.Assignment.displayName = 'proto.proto.grpc.Assignment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.grpc.InstanceSubscriptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.grpc.InstanceSubscriptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.grpc.InstanceSubscriptions.displayName = 'proto.proto.grpc.InstanceSubscriptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.grpc.InstanceId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.grpc.InstanceId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.grpc.InstanceId.displayName = 'proto.proto.grpc.InstanceId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.grpc.SessionToken = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.grpc.SessionToken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.grpc.SessionToken.displayName = 'proto.proto.grpc.SessionToken';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.grpc.InstanceInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.grpc.InstanceInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.grpc.InstanceInfo.displayName = 'proto.proto.grpc.InstanceInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.grpc.ViewerInstanceInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.grpc.ViewerInstanceInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.grpc.ViewerInstanceInfo.displayName = 'proto.proto.grpc.ViewerInstanceInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.grpc.ControllerInstanceInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.grpc.ControllerInstanceInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.grpc.ControllerInstanceInfo.displayName = 'proto.proto.grpc.ControllerInstanceInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.grpc.SessionInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.grpc.SessionInfo.repeatedFields_, null);
};
goog.inherits(proto.proto.grpc.SessionInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.grpc.SessionInfo.displayName = 'proto.proto.grpc.SessionInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.grpc.Sessions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.grpc.Sessions.repeatedFields_, null);
};
goog.inherits(proto.proto.grpc.Sessions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.grpc.Sessions.displayName = 'proto.proto.grpc.Sessions';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.grpc.Assignment.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.grpc.Assignment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.grpc.Assignment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.Assignment.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionToken: (f = msg.getSessionToken()) && proto.proto.grpc.SessionToken.toObject(includeInstance, f),
    instanceId: (f = msg.getInstanceId()) && proto.proto.grpc.InstanceId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.grpc.Assignment}
 */
proto.proto.grpc.Assignment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.grpc.Assignment;
  return proto.proto.grpc.Assignment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.grpc.Assignment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.grpc.Assignment}
 */
proto.proto.grpc.Assignment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.grpc.SessionToken;
      reader.readMessage(value,proto.proto.grpc.SessionToken.deserializeBinaryFromReader);
      msg.setSessionToken(value);
      break;
    case 2:
      var value = new proto.proto.grpc.InstanceId;
      reader.readMessage(value,proto.proto.grpc.InstanceId.deserializeBinaryFromReader);
      msg.setInstanceId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.grpc.Assignment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.grpc.Assignment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.grpc.Assignment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.Assignment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionToken();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.grpc.SessionToken.serializeBinaryToWriter
    );
  }
  f = message.getInstanceId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.grpc.InstanceId.serializeBinaryToWriter
    );
  }
};


/**
 * optional SessionToken session_token = 1;
 * @return {?proto.proto.grpc.SessionToken}
 */
proto.proto.grpc.Assignment.prototype.getSessionToken = function() {
  return /** @type{?proto.proto.grpc.SessionToken} */ (
    jspb.Message.getWrapperField(this, proto.proto.grpc.SessionToken, 1));
};


/**
 * @param {?proto.proto.grpc.SessionToken|undefined} value
 * @return {!proto.proto.grpc.Assignment} returns this
*/
proto.proto.grpc.Assignment.prototype.setSessionToken = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.grpc.Assignment} returns this
 */
proto.proto.grpc.Assignment.prototype.clearSessionToken = function() {
  return this.setSessionToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.grpc.Assignment.prototype.hasSessionToken = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional InstanceId instance_id = 2;
 * @return {?proto.proto.grpc.InstanceId}
 */
proto.proto.grpc.Assignment.prototype.getInstanceId = function() {
  return /** @type{?proto.proto.grpc.InstanceId} */ (
    jspb.Message.getWrapperField(this, proto.proto.grpc.InstanceId, 2));
};


/**
 * @param {?proto.proto.grpc.InstanceId|undefined} value
 * @return {!proto.proto.grpc.Assignment} returns this
*/
proto.proto.grpc.Assignment.prototype.setInstanceId = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.grpc.Assignment} returns this
 */
proto.proto.grpc.Assignment.prototype.clearInstanceId = function() {
  return this.setInstanceId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.grpc.Assignment.prototype.hasInstanceId = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.grpc.InstanceSubscriptions.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.grpc.InstanceSubscriptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.grpc.InstanceSubscriptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.InstanceSubscriptions.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.grpc.InstanceSubscriptions}
 */
proto.proto.grpc.InstanceSubscriptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.grpc.InstanceSubscriptions;
  return proto.proto.grpc.InstanceSubscriptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.grpc.InstanceSubscriptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.grpc.InstanceSubscriptions}
 */
proto.proto.grpc.InstanceSubscriptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.grpc.InstanceSubscriptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.grpc.InstanceSubscriptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.grpc.InstanceSubscriptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.InstanceSubscriptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.grpc.InstanceId.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.grpc.InstanceId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.grpc.InstanceId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.InstanceId.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.grpc.InstanceId}
 */
proto.proto.grpc.InstanceId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.grpc.InstanceId;
  return proto.proto.grpc.InstanceId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.grpc.InstanceId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.grpc.InstanceId}
 */
proto.proto.grpc.InstanceId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.grpc.InstanceId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.grpc.InstanceId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.grpc.InstanceId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.InstanceId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.proto.grpc.InstanceId.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.grpc.InstanceId} returns this
 */
proto.proto.grpc.InstanceId.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.grpc.SessionToken.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.grpc.SessionToken.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.grpc.SessionToken} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.SessionToken.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.grpc.SessionToken}
 */
proto.proto.grpc.SessionToken.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.grpc.SessionToken;
  return proto.proto.grpc.SessionToken.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.grpc.SessionToken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.grpc.SessionToken}
 */
proto.proto.grpc.SessionToken.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.grpc.SessionToken.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.grpc.SessionToken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.grpc.SessionToken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.SessionToken.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.proto.grpc.SessionToken.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.grpc.SessionToken} returns this
 */
proto.proto.grpc.SessionToken.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.grpc.InstanceInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.grpc.InstanceInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.grpc.InstanceInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.InstanceInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionToken: (f = msg.getSessionToken()) && proto.proto.grpc.SessionToken.toObject(includeInstance, f),
    instanceId: (f = msg.getInstanceId()) && proto.proto.grpc.InstanceId.toObject(includeInstance, f),
    connectedSince: (f = msg.getConnectedSince()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    state: jspb.Message.getFieldWithDefault(msg, 11, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.grpc.InstanceInfo}
 */
proto.proto.grpc.InstanceInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.grpc.InstanceInfo;
  return proto.proto.grpc.InstanceInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.grpc.InstanceInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.grpc.InstanceInfo}
 */
proto.proto.grpc.InstanceInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.grpc.SessionToken;
      reader.readMessage(value,proto.proto.grpc.SessionToken.deserializeBinaryFromReader);
      msg.setSessionToken(value);
      break;
    case 2:
      var value = new proto.proto.grpc.InstanceId;
      reader.readMessage(value,proto.proto.grpc.InstanceId.deserializeBinaryFromReader);
      msg.setInstanceId(value);
      break;
    case 10:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setConnectedSince(value);
      break;
    case 11:
      var value = /** @type {!proto.proto.grpc.InstanceState} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.grpc.InstanceInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.grpc.InstanceInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.grpc.InstanceInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.InstanceInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionToken();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.grpc.SessionToken.serializeBinaryToWriter
    );
  }
  f = message.getInstanceId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.grpc.InstanceId.serializeBinaryToWriter
    );
  }
  f = message.getConnectedSince();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
};


/**
 * optional SessionToken session_token = 1;
 * @return {?proto.proto.grpc.SessionToken}
 */
proto.proto.grpc.InstanceInfo.prototype.getSessionToken = function() {
  return /** @type{?proto.proto.grpc.SessionToken} */ (
    jspb.Message.getWrapperField(this, proto.proto.grpc.SessionToken, 1));
};


/**
 * @param {?proto.proto.grpc.SessionToken|undefined} value
 * @return {!proto.proto.grpc.InstanceInfo} returns this
*/
proto.proto.grpc.InstanceInfo.prototype.setSessionToken = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.grpc.InstanceInfo} returns this
 */
proto.proto.grpc.InstanceInfo.prototype.clearSessionToken = function() {
  return this.setSessionToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.grpc.InstanceInfo.prototype.hasSessionToken = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional InstanceId instance_id = 2;
 * @return {?proto.proto.grpc.InstanceId}
 */
proto.proto.grpc.InstanceInfo.prototype.getInstanceId = function() {
  return /** @type{?proto.proto.grpc.InstanceId} */ (
    jspb.Message.getWrapperField(this, proto.proto.grpc.InstanceId, 2));
};


/**
 * @param {?proto.proto.grpc.InstanceId|undefined} value
 * @return {!proto.proto.grpc.InstanceInfo} returns this
*/
proto.proto.grpc.InstanceInfo.prototype.setInstanceId = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.grpc.InstanceInfo} returns this
 */
proto.proto.grpc.InstanceInfo.prototype.clearInstanceId = function() {
  return this.setInstanceId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.grpc.InstanceInfo.prototype.hasInstanceId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.Timestamp connected_since = 10;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.proto.grpc.InstanceInfo.prototype.getConnectedSince = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 10));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.proto.grpc.InstanceInfo} returns this
*/
proto.proto.grpc.InstanceInfo.prototype.setConnectedSince = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.grpc.InstanceInfo} returns this
 */
proto.proto.grpc.InstanceInfo.prototype.clearConnectedSince = function() {
  return this.setConnectedSince(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.grpc.InstanceInfo.prototype.hasConnectedSince = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional InstanceState state = 11;
 * @return {!proto.proto.grpc.InstanceState}
 */
proto.proto.grpc.InstanceInfo.prototype.getState = function() {
  return /** @type {!proto.proto.grpc.InstanceState} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {!proto.proto.grpc.InstanceState} value
 * @return {!proto.proto.grpc.InstanceInfo} returns this
 */
proto.proto.grpc.InstanceInfo.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.grpc.ViewerInstanceInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.grpc.ViewerInstanceInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.grpc.ViewerInstanceInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.ViewerInstanceInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    info: (f = msg.getInfo()) && proto.proto.grpc.InstanceInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.grpc.ViewerInstanceInfo}
 */
proto.proto.grpc.ViewerInstanceInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.grpc.ViewerInstanceInfo;
  return proto.proto.grpc.ViewerInstanceInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.grpc.ViewerInstanceInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.grpc.ViewerInstanceInfo}
 */
proto.proto.grpc.ViewerInstanceInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.grpc.InstanceInfo;
      reader.readMessage(value,proto.proto.grpc.InstanceInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.grpc.ViewerInstanceInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.grpc.ViewerInstanceInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.grpc.ViewerInstanceInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.ViewerInstanceInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.grpc.InstanceInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional InstanceInfo info = 1;
 * @return {?proto.proto.grpc.InstanceInfo}
 */
proto.proto.grpc.ViewerInstanceInfo.prototype.getInfo = function() {
  return /** @type{?proto.proto.grpc.InstanceInfo} */ (
    jspb.Message.getWrapperField(this, proto.proto.grpc.InstanceInfo, 1));
};


/**
 * @param {?proto.proto.grpc.InstanceInfo|undefined} value
 * @return {!proto.proto.grpc.ViewerInstanceInfo} returns this
*/
proto.proto.grpc.ViewerInstanceInfo.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.grpc.ViewerInstanceInfo} returns this
 */
proto.proto.grpc.ViewerInstanceInfo.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.grpc.ViewerInstanceInfo.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.grpc.ControllerInstanceInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.grpc.ControllerInstanceInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.grpc.ControllerInstanceInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.ControllerInstanceInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    info: (f = msg.getInfo()) && proto.proto.grpc.InstanceInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.grpc.ControllerInstanceInfo}
 */
proto.proto.grpc.ControllerInstanceInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.grpc.ControllerInstanceInfo;
  return proto.proto.grpc.ControllerInstanceInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.grpc.ControllerInstanceInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.grpc.ControllerInstanceInfo}
 */
proto.proto.grpc.ControllerInstanceInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.grpc.InstanceInfo;
      reader.readMessage(value,proto.proto.grpc.InstanceInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.grpc.ControllerInstanceInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.grpc.ControllerInstanceInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.grpc.ControllerInstanceInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.ControllerInstanceInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.grpc.InstanceInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional InstanceInfo info = 1;
 * @return {?proto.proto.grpc.InstanceInfo}
 */
proto.proto.grpc.ControllerInstanceInfo.prototype.getInfo = function() {
  return /** @type{?proto.proto.grpc.InstanceInfo} */ (
    jspb.Message.getWrapperField(this, proto.proto.grpc.InstanceInfo, 1));
};


/**
 * @param {?proto.proto.grpc.InstanceInfo|undefined} value
 * @return {!proto.proto.grpc.ControllerInstanceInfo} returns this
*/
proto.proto.grpc.ControllerInstanceInfo.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.grpc.ControllerInstanceInfo} returns this
 */
proto.proto.grpc.ControllerInstanceInfo.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.grpc.ControllerInstanceInfo.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.grpc.SessionInfo.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.grpc.SessionInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.grpc.SessionInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.grpc.SessionInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.SessionInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: (f = msg.getToken()) && proto.proto.grpc.SessionToken.toObject(includeInstance, f),
    viewersList: jspb.Message.toObjectList(msg.getViewersList(),
    proto.proto.grpc.ViewerInstanceInfo.toObject, includeInstance),
    controllersList: jspb.Message.toObjectList(msg.getControllersList(),
    proto.proto.grpc.ControllerInstanceInfo.toObject, includeInstance),
    started: (f = msg.getStarted()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.grpc.SessionInfo}
 */
proto.proto.grpc.SessionInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.grpc.SessionInfo;
  return proto.proto.grpc.SessionInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.grpc.SessionInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.grpc.SessionInfo}
 */
proto.proto.grpc.SessionInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.grpc.SessionToken;
      reader.readMessage(value,proto.proto.grpc.SessionToken.deserializeBinaryFromReader);
      msg.setToken(value);
      break;
    case 2:
      var value = new proto.proto.grpc.ViewerInstanceInfo;
      reader.readMessage(value,proto.proto.grpc.ViewerInstanceInfo.deserializeBinaryFromReader);
      msg.addViewers(value);
      break;
    case 3:
      var value = new proto.proto.grpc.ControllerInstanceInfo;
      reader.readMessage(value,proto.proto.grpc.ControllerInstanceInfo.deserializeBinaryFromReader);
      msg.addControllers(value);
      break;
    case 10:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setStarted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.grpc.SessionInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.grpc.SessionInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.grpc.SessionInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.SessionInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.grpc.SessionToken.serializeBinaryToWriter
    );
  }
  f = message.getViewersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.proto.grpc.ViewerInstanceInfo.serializeBinaryToWriter
    );
  }
  f = message.getControllersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.proto.grpc.ControllerInstanceInfo.serializeBinaryToWriter
    );
  }
  f = message.getStarted();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional SessionToken token = 1;
 * @return {?proto.proto.grpc.SessionToken}
 */
proto.proto.grpc.SessionInfo.prototype.getToken = function() {
  return /** @type{?proto.proto.grpc.SessionToken} */ (
    jspb.Message.getWrapperField(this, proto.proto.grpc.SessionToken, 1));
};


/**
 * @param {?proto.proto.grpc.SessionToken|undefined} value
 * @return {!proto.proto.grpc.SessionInfo} returns this
*/
proto.proto.grpc.SessionInfo.prototype.setToken = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.grpc.SessionInfo} returns this
 */
proto.proto.grpc.SessionInfo.prototype.clearToken = function() {
  return this.setToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.grpc.SessionInfo.prototype.hasToken = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ViewerInstanceInfo viewers = 2;
 * @return {!Array<!proto.proto.grpc.ViewerInstanceInfo>}
 */
proto.proto.grpc.SessionInfo.prototype.getViewersList = function() {
  return /** @type{!Array<!proto.proto.grpc.ViewerInstanceInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.grpc.ViewerInstanceInfo, 2));
};


/**
 * @param {!Array<!proto.proto.grpc.ViewerInstanceInfo>} value
 * @return {!proto.proto.grpc.SessionInfo} returns this
*/
proto.proto.grpc.SessionInfo.prototype.setViewersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.proto.grpc.ViewerInstanceInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.grpc.ViewerInstanceInfo}
 */
proto.proto.grpc.SessionInfo.prototype.addViewers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.proto.grpc.ViewerInstanceInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.grpc.SessionInfo} returns this
 */
proto.proto.grpc.SessionInfo.prototype.clearViewersList = function() {
  return this.setViewersList([]);
};


/**
 * repeated ControllerInstanceInfo controllers = 3;
 * @return {!Array<!proto.proto.grpc.ControllerInstanceInfo>}
 */
proto.proto.grpc.SessionInfo.prototype.getControllersList = function() {
  return /** @type{!Array<!proto.proto.grpc.ControllerInstanceInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.grpc.ControllerInstanceInfo, 3));
};


/**
 * @param {!Array<!proto.proto.grpc.ControllerInstanceInfo>} value
 * @return {!proto.proto.grpc.SessionInfo} returns this
*/
proto.proto.grpc.SessionInfo.prototype.setControllersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.proto.grpc.ControllerInstanceInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.grpc.ControllerInstanceInfo}
 */
proto.proto.grpc.SessionInfo.prototype.addControllers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.proto.grpc.ControllerInstanceInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.grpc.SessionInfo} returns this
 */
proto.proto.grpc.SessionInfo.prototype.clearControllersList = function() {
  return this.setControllersList([]);
};


/**
 * optional google.protobuf.Timestamp started = 10;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.proto.grpc.SessionInfo.prototype.getStarted = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 10));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.proto.grpc.SessionInfo} returns this
*/
proto.proto.grpc.SessionInfo.prototype.setStarted = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.grpc.SessionInfo} returns this
 */
proto.proto.grpc.SessionInfo.prototype.clearStarted = function() {
  return this.setStarted(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.grpc.SessionInfo.prototype.hasStarted = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.grpc.Sessions.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.grpc.Sessions.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.grpc.Sessions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.grpc.Sessions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.Sessions.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionsList: jspb.Message.toObjectList(msg.getSessionsList(),
    proto.proto.grpc.SessionInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.grpc.Sessions}
 */
proto.proto.grpc.Sessions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.grpc.Sessions;
  return proto.proto.grpc.Sessions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.grpc.Sessions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.grpc.Sessions}
 */
proto.proto.grpc.Sessions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.grpc.SessionInfo;
      reader.readMessage(value,proto.proto.grpc.SessionInfo.deserializeBinaryFromReader);
      msg.addSessions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.grpc.Sessions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.grpc.Sessions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.grpc.Sessions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.Sessions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.grpc.SessionInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SessionInfo sessions = 1;
 * @return {!Array<!proto.proto.grpc.SessionInfo>}
 */
proto.proto.grpc.Sessions.prototype.getSessionsList = function() {
  return /** @type{!Array<!proto.proto.grpc.SessionInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.grpc.SessionInfo, 1));
};


/**
 * @param {!Array<!proto.proto.grpc.SessionInfo>} value
 * @return {!proto.proto.grpc.Sessions} returns this
*/
proto.proto.grpc.Sessions.prototype.setSessionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.grpc.SessionInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.grpc.SessionInfo}
 */
proto.proto.grpc.Sessions.prototype.addSessions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.grpc.SessionInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.grpc.Sessions} returns this
 */
proto.proto.grpc.Sessions.prototype.clearSessionsList = function() {
  return this.setSessionsList([]);
};


/**
 * @enum {number}
 */
proto.proto.grpc.InstanceState = {
  ONLINE: 0,
  OFFLINE: 1,
  FAILED: 2
};

goog.object.extend(exports, proto.proto.grpc);
