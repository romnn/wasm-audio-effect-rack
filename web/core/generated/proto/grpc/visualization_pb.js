// source: proto/grpc/visualization.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
goog.exportSymbol('proto.proto.grpc.Color', null, global);
goog.exportSymbol('proto.proto.grpc.Color.ColorCase', null, global);
goog.exportSymbol('proto.proto.grpc.Font', null, global);
goog.exportSymbol('proto.proto.grpc.FractalTunnelOrbitConstraints', null, global);
goog.exportSymbol('proto.proto.grpc.FractalTunnelParameters', null, global);
goog.exportSymbol('proto.proto.grpc.FractalTunnelStartConfig', null, global);
goog.exportSymbol('proto.proto.grpc.GenericVisualizationConfig', null, global);
goog.exportSymbol('proto.proto.grpc.HSLColor', null, global);
goog.exportSymbol('proto.proto.grpc.RGBColor', null, global);
goog.exportSymbol('proto.proto.grpc.TextTransformChar', null, global);
goog.exportSymbol('proto.proto.grpc.TextTransformParameters', null, global);
goog.exportSymbol('proto.proto.grpc.TextTransformStartConfig', null, global);
goog.exportSymbol('proto.proto.grpc.VisualizationParameters', null, global);
goog.exportSymbol('proto.proto.grpc.VisualizationStartConfig', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.grpc.VisualizationStartConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.grpc.VisualizationStartConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.grpc.VisualizationStartConfig.displayName = 'proto.proto.grpc.VisualizationStartConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.grpc.VisualizationParameters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.grpc.VisualizationParameters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.grpc.VisualizationParameters.displayName = 'proto.proto.grpc.VisualizationParameters';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.grpc.GenericVisualizationConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.grpc.GenericVisualizationConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.grpc.GenericVisualizationConfig.displayName = 'proto.proto.grpc.GenericVisualizationConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.grpc.FractalTunnelStartConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.grpc.FractalTunnelStartConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.grpc.FractalTunnelStartConfig.displayName = 'proto.proto.grpc.FractalTunnelStartConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.grpc.TextTransformStartConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.grpc.TextTransformStartConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.grpc.TextTransformStartConfig.displayName = 'proto.proto.grpc.TextTransformStartConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.grpc.RGBColor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.grpc.RGBColor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.grpc.RGBColor.displayName = 'proto.proto.grpc.RGBColor';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.grpc.HSLColor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.grpc.HSLColor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.grpc.HSLColor.displayName = 'proto.proto.grpc.HSLColor';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.grpc.Color = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.proto.grpc.Color.oneofGroups_);
};
goog.inherits(proto.proto.grpc.Color, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.grpc.Color.displayName = 'proto.proto.grpc.Color';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.grpc.TextTransformChar = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.grpc.TextTransformChar.repeatedFields_, null);
};
goog.inherits(proto.proto.grpc.TextTransformChar, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.grpc.TextTransformChar.displayName = 'proto.proto.grpc.TextTransformChar';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.grpc.TextTransformParameters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.grpc.TextTransformParameters.repeatedFields_, null);
};
goog.inherits(proto.proto.grpc.TextTransformParameters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.grpc.TextTransformParameters.displayName = 'proto.proto.grpc.TextTransformParameters';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.grpc.FractalTunnelOrbitConstraints = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.grpc.FractalTunnelOrbitConstraints, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.grpc.FractalTunnelOrbitConstraints.displayName = 'proto.proto.grpc.FractalTunnelOrbitConstraints';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.grpc.FractalTunnelParameters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.grpc.FractalTunnelParameters.repeatedFields_, null);
};
goog.inherits(proto.proto.grpc.FractalTunnelParameters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.grpc.FractalTunnelParameters.displayName = 'proto.proto.grpc.FractalTunnelParameters';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.grpc.VisualizationStartConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.grpc.VisualizationStartConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.grpc.VisualizationStartConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.VisualizationStartConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    config: (f = msg.getConfig()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.grpc.VisualizationStartConfig}
 */
proto.proto.grpc.VisualizationStartConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.grpc.VisualizationStartConfig;
  return proto.proto.grpc.VisualizationStartConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.grpc.VisualizationStartConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.grpc.VisualizationStartConfig}
 */
proto.proto.grpc.VisualizationStartConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.grpc.VisualizationStartConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.grpc.VisualizationStartConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.grpc.VisualizationStartConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.VisualizationStartConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Any config = 1;
 * @return {?proto.google.protobuf.Any}
 */
proto.proto.grpc.VisualizationStartConfig.prototype.getConfig = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 1));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.proto.grpc.VisualizationStartConfig} returns this
*/
proto.proto.grpc.VisualizationStartConfig.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.grpc.VisualizationStartConfig} returns this
 */
proto.proto.grpc.VisualizationStartConfig.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.grpc.VisualizationStartConfig.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.grpc.VisualizationParameters.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.grpc.VisualizationParameters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.grpc.VisualizationParameters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.VisualizationParameters.toObject = function(includeInstance, msg) {
  var f, obj = {
    parameters: (f = msg.getParameters()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.grpc.VisualizationParameters}
 */
proto.proto.grpc.VisualizationParameters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.grpc.VisualizationParameters;
  return proto.proto.grpc.VisualizationParameters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.grpc.VisualizationParameters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.grpc.VisualizationParameters}
 */
proto.proto.grpc.VisualizationParameters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setParameters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.grpc.VisualizationParameters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.grpc.VisualizationParameters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.grpc.VisualizationParameters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.VisualizationParameters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParameters();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Any parameters = 1;
 * @return {?proto.google.protobuf.Any}
 */
proto.proto.grpc.VisualizationParameters.prototype.getParameters = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 1));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.proto.grpc.VisualizationParameters} returns this
*/
proto.proto.grpc.VisualizationParameters.prototype.setParameters = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.grpc.VisualizationParameters} returns this
 */
proto.proto.grpc.VisualizationParameters.prototype.clearParameters = function() {
  return this.setParameters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.grpc.VisualizationParameters.prototype.hasParameters = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.grpc.GenericVisualizationConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.grpc.GenericVisualizationConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.grpc.GenericVisualizationConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.GenericVisualizationConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    intsMap: (f = msg.getIntsMap()) ? f.toObject(includeInstance, undefined) : [],
    uintsMap: (f = msg.getUintsMap()) ? f.toObject(includeInstance, undefined) : [],
    floatsMap: (f = msg.getFloatsMap()) ? f.toObject(includeInstance, undefined) : [],
    stringsMap: (f = msg.getStringsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.grpc.GenericVisualizationConfig}
 */
proto.proto.grpc.GenericVisualizationConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.grpc.GenericVisualizationConfig;
  return proto.proto.grpc.GenericVisualizationConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.grpc.GenericVisualizationConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.grpc.GenericVisualizationConfig}
 */
proto.proto.grpc.GenericVisualizationConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getIntsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt32, null, "", 0);
         });
      break;
    case 2:
      var value = msg.getUintsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readUint32, null, "", 0);
         });
      break;
    case 3:
      var value = msg.getFloatsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readFloat, null, "", 0.0);
         });
      break;
    case 4:
      var value = msg.getStringsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.grpc.GenericVisualizationConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.grpc.GenericVisualizationConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.grpc.GenericVisualizationConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.GenericVisualizationConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIntsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt32);
  }
  f = message.getUintsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeUint32);
  }
  f = message.getFloatsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeFloat);
  }
  f = message.getStringsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * map<string, int32> ints = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.proto.grpc.GenericVisualizationConfig.prototype.getIntsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.proto.grpc.GenericVisualizationConfig} returns this
 */
proto.proto.grpc.GenericVisualizationConfig.prototype.clearIntsMap = function() {
  this.getIntsMap().clear();
  return this;};


/**
 * map<string, uint32> uints = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.proto.grpc.GenericVisualizationConfig.prototype.getUintsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.proto.grpc.GenericVisualizationConfig} returns this
 */
proto.proto.grpc.GenericVisualizationConfig.prototype.clearUintsMap = function() {
  this.getUintsMap().clear();
  return this;};


/**
 * map<string, float> floats = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.proto.grpc.GenericVisualizationConfig.prototype.getFloatsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.proto.grpc.GenericVisualizationConfig} returns this
 */
proto.proto.grpc.GenericVisualizationConfig.prototype.clearFloatsMap = function() {
  this.getFloatsMap().clear();
  return this;};


/**
 * map<string, string> strings = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.proto.grpc.GenericVisualizationConfig.prototype.getStringsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.proto.grpc.GenericVisualizationConfig} returns this
 */
proto.proto.grpc.GenericVisualizationConfig.prototype.clearStringsMap = function() {
  this.getStringsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.grpc.FractalTunnelStartConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.grpc.FractalTunnelStartConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.grpc.FractalTunnelStartConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.FractalTunnelStartConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    numPointsPerSubset: jspb.Message.getFieldWithDefault(msg, 1, 0),
    numSubsets: jspb.Message.getFieldWithDefault(msg, 2, 0),
    numLevels: jspb.Message.getFieldWithDefault(msg, 3, 0),
    levelDepth: jspb.Message.getFieldWithDefault(msg, 4, 0),
    scaleFactor: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    spriteSize: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    cameraBound: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.grpc.FractalTunnelStartConfig}
 */
proto.proto.grpc.FractalTunnelStartConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.grpc.FractalTunnelStartConfig;
  return proto.proto.grpc.FractalTunnelStartConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.grpc.FractalTunnelStartConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.grpc.FractalTunnelStartConfig}
 */
proto.proto.grpc.FractalTunnelStartConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumPointsPerSubset(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumSubsets(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumLevels(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLevelDepth(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setScaleFactor(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSpriteSize(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCameraBound(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.grpc.FractalTunnelStartConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.grpc.FractalTunnelStartConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.grpc.FractalTunnelStartConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.FractalTunnelStartConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumPointsPerSubset();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getNumSubsets();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getNumLevels();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getLevelDepth();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getScaleFactor();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getSpriteSize();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getCameraBound();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
};


/**
 * optional int32 num_points_per_subset = 1;
 * @return {number}
 */
proto.proto.grpc.FractalTunnelStartConfig.prototype.getNumPointsPerSubset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.grpc.FractalTunnelStartConfig} returns this
 */
proto.proto.grpc.FractalTunnelStartConfig.prototype.setNumPointsPerSubset = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 num_subsets = 2;
 * @return {number}
 */
proto.proto.grpc.FractalTunnelStartConfig.prototype.getNumSubsets = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.grpc.FractalTunnelStartConfig} returns this
 */
proto.proto.grpc.FractalTunnelStartConfig.prototype.setNumSubsets = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 num_levels = 3;
 * @return {number}
 */
proto.proto.grpc.FractalTunnelStartConfig.prototype.getNumLevels = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.grpc.FractalTunnelStartConfig} returns this
 */
proto.proto.grpc.FractalTunnelStartConfig.prototype.setNumLevels = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 level_depth = 4;
 * @return {number}
 */
proto.proto.grpc.FractalTunnelStartConfig.prototype.getLevelDepth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.grpc.FractalTunnelStartConfig} returns this
 */
proto.proto.grpc.FractalTunnelStartConfig.prototype.setLevelDepth = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional float scale_factor = 5;
 * @return {number}
 */
proto.proto.grpc.FractalTunnelStartConfig.prototype.getScaleFactor = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.grpc.FractalTunnelStartConfig} returns this
 */
proto.proto.grpc.FractalTunnelStartConfig.prototype.setScaleFactor = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float sprite_size = 6;
 * @return {number}
 */
proto.proto.grpc.FractalTunnelStartConfig.prototype.getSpriteSize = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.grpc.FractalTunnelStartConfig} returns this
 */
proto.proto.grpc.FractalTunnelStartConfig.prototype.setSpriteSize = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional float camera_bound = 7;
 * @return {number}
 */
proto.proto.grpc.FractalTunnelStartConfig.prototype.getCameraBound = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.grpc.FractalTunnelStartConfig} returns this
 */
proto.proto.grpc.FractalTunnelStartConfig.prototype.setCameraBound = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.grpc.TextTransformStartConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.grpc.TextTransformStartConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.grpc.TextTransformStartConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.TextTransformStartConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: jspb.Message.getFieldWithDefault(msg, 1, ""),
    resolution: jspb.Message.getFieldWithDefault(msg, 2, 0),
    size: jspb.Message.getFieldWithDefault(msg, 3, 0),
    font: jspb.Message.getFieldWithDefault(msg, 4, 0),
    textResolution: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.grpc.TextTransformStartConfig}
 */
proto.proto.grpc.TextTransformStartConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.grpc.TextTransformStartConfig;
  return proto.proto.grpc.TextTransformStartConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.grpc.TextTransformStartConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.grpc.TextTransformStartConfig}
 */
proto.proto.grpc.TextTransformStartConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResolution(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSize(value);
      break;
    case 4:
      var value = /** @type {!proto.proto.grpc.Font} */ (reader.readEnum());
      msg.setFont(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTextResolution(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.grpc.TextTransformStartConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.grpc.TextTransformStartConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.grpc.TextTransformStartConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.TextTransformStartConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResolution();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getFont();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getTextResolution();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional string text = 1;
 * @return {string}
 */
proto.proto.grpc.TextTransformStartConfig.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.grpc.TextTransformStartConfig} returns this
 */
proto.proto.grpc.TextTransformStartConfig.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 resolution = 2;
 * @return {number}
 */
proto.proto.grpc.TextTransformStartConfig.prototype.getResolution = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.grpc.TextTransformStartConfig} returns this
 */
proto.proto.grpc.TextTransformStartConfig.prototype.setResolution = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 size = 3;
 * @return {number}
 */
proto.proto.grpc.TextTransformStartConfig.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.grpc.TextTransformStartConfig} returns this
 */
proto.proto.grpc.TextTransformStartConfig.prototype.setSize = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Font font = 4;
 * @return {!proto.proto.grpc.Font}
 */
proto.proto.grpc.TextTransformStartConfig.prototype.getFont = function() {
  return /** @type {!proto.proto.grpc.Font} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.proto.grpc.Font} value
 * @return {!proto.proto.grpc.TextTransformStartConfig} returns this
 */
proto.proto.grpc.TextTransformStartConfig.prototype.setFont = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional uint32 text_resolution = 5;
 * @return {number}
 */
proto.proto.grpc.TextTransformStartConfig.prototype.getTextResolution = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.grpc.TextTransformStartConfig} returns this
 */
proto.proto.grpc.TextTransformStartConfig.prototype.setTextResolution = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.grpc.RGBColor.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.grpc.RGBColor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.grpc.RGBColor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.RGBColor.toObject = function(includeInstance, msg) {
  var f, obj = {
    r: jspb.Message.getFieldWithDefault(msg, 1, 0),
    g: jspb.Message.getFieldWithDefault(msg, 2, 0),
    b: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.grpc.RGBColor}
 */
proto.proto.grpc.RGBColor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.grpc.RGBColor;
  return proto.proto.grpc.RGBColor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.grpc.RGBColor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.grpc.RGBColor}
 */
proto.proto.grpc.RGBColor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setR(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setG(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setB(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.grpc.RGBColor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.grpc.RGBColor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.grpc.RGBColor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.RGBColor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getR();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getG();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getB();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 r = 1;
 * @return {number}
 */
proto.proto.grpc.RGBColor.prototype.getR = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.grpc.RGBColor} returns this
 */
proto.proto.grpc.RGBColor.prototype.setR = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 g = 2;
 * @return {number}
 */
proto.proto.grpc.RGBColor.prototype.getG = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.grpc.RGBColor} returns this
 */
proto.proto.grpc.RGBColor.prototype.setG = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 b = 3;
 * @return {number}
 */
proto.proto.grpc.RGBColor.prototype.getB = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.grpc.RGBColor} returns this
 */
proto.proto.grpc.RGBColor.prototype.setB = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.grpc.HSLColor.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.grpc.HSLColor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.grpc.HSLColor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.HSLColor.toObject = function(includeInstance, msg) {
  var f, obj = {
    h: jspb.Message.getFieldWithDefault(msg, 1, 0),
    s: jspb.Message.getFieldWithDefault(msg, 2, 0),
    l: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.grpc.HSLColor}
 */
proto.proto.grpc.HSLColor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.grpc.HSLColor;
  return proto.proto.grpc.HSLColor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.grpc.HSLColor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.grpc.HSLColor}
 */
proto.proto.grpc.HSLColor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setH(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setS(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setL(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.grpc.HSLColor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.grpc.HSLColor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.grpc.HSLColor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.HSLColor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getH();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getS();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getL();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 h = 1;
 * @return {number}
 */
proto.proto.grpc.HSLColor.prototype.getH = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.grpc.HSLColor} returns this
 */
proto.proto.grpc.HSLColor.prototype.setH = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 s = 2;
 * @return {number}
 */
proto.proto.grpc.HSLColor.prototype.getS = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.grpc.HSLColor} returns this
 */
proto.proto.grpc.HSLColor.prototype.setS = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 l = 3;
 * @return {number}
 */
proto.proto.grpc.HSLColor.prototype.getL = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.grpc.HSLColor} returns this
 */
proto.proto.grpc.HSLColor.prototype.setL = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.proto.grpc.Color.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.proto.grpc.Color.ColorCase = {
  COLOR_NOT_SET: 0,
  RGB: 1,
  HSL: 2
};

/**
 * @return {proto.proto.grpc.Color.ColorCase}
 */
proto.proto.grpc.Color.prototype.getColorCase = function() {
  return /** @type {proto.proto.grpc.Color.ColorCase} */(jspb.Message.computeOneofCase(this, proto.proto.grpc.Color.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.grpc.Color.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.grpc.Color.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.grpc.Color} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.Color.toObject = function(includeInstance, msg) {
  var f, obj = {
    rgb: (f = msg.getRgb()) && proto.proto.grpc.RGBColor.toObject(includeInstance, f),
    hsl: (f = msg.getHsl()) && proto.proto.grpc.HSLColor.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.grpc.Color}
 */
proto.proto.grpc.Color.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.grpc.Color;
  return proto.proto.grpc.Color.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.grpc.Color} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.grpc.Color}
 */
proto.proto.grpc.Color.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.grpc.RGBColor;
      reader.readMessage(value,proto.proto.grpc.RGBColor.deserializeBinaryFromReader);
      msg.setRgb(value);
      break;
    case 2:
      var value = new proto.proto.grpc.HSLColor;
      reader.readMessage(value,proto.proto.grpc.HSLColor.deserializeBinaryFromReader);
      msg.setHsl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.grpc.Color.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.grpc.Color.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.grpc.Color} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.Color.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRgb();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.grpc.RGBColor.serializeBinaryToWriter
    );
  }
  f = message.getHsl();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.grpc.HSLColor.serializeBinaryToWriter
    );
  }
};


/**
 * optional RGBColor rgb = 1;
 * @return {?proto.proto.grpc.RGBColor}
 */
proto.proto.grpc.Color.prototype.getRgb = function() {
  return /** @type{?proto.proto.grpc.RGBColor} */ (
    jspb.Message.getWrapperField(this, proto.proto.grpc.RGBColor, 1));
};


/**
 * @param {?proto.proto.grpc.RGBColor|undefined} value
 * @return {!proto.proto.grpc.Color} returns this
*/
proto.proto.grpc.Color.prototype.setRgb = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.proto.grpc.Color.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.grpc.Color} returns this
 */
proto.proto.grpc.Color.prototype.clearRgb = function() {
  return this.setRgb(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.grpc.Color.prototype.hasRgb = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional HSLColor hsl = 2;
 * @return {?proto.proto.grpc.HSLColor}
 */
proto.proto.grpc.Color.prototype.getHsl = function() {
  return /** @type{?proto.proto.grpc.HSLColor} */ (
    jspb.Message.getWrapperField(this, proto.proto.grpc.HSLColor, 2));
};


/**
 * @param {?proto.proto.grpc.HSLColor|undefined} value
 * @return {!proto.proto.grpc.Color} returns this
*/
proto.proto.grpc.Color.prototype.setHsl = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.proto.grpc.Color.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.grpc.Color} returns this
 */
proto.proto.grpc.Color.prototype.clearHsl = function() {
  return this.setHsl(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.grpc.Color.prototype.hasHsl = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.grpc.TextTransformChar.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.grpc.TextTransformChar.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.grpc.TextTransformChar.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.grpc.TextTransformChar} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.TextTransformChar.toObject = function(includeInstance, msg) {
  var f, obj = {
    widthFrac: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    depth: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    colorList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 3)) == null ? undefined : f,
    textLongitudinalVelocityFactor: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    textLateralVelocityFactor: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.grpc.TextTransformChar}
 */
proto.proto.grpc.TextTransformChar.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.grpc.TextTransformChar;
  return proto.proto.grpc.TextTransformChar.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.grpc.TextTransformChar} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.grpc.TextTransformChar}
 */
proto.proto.grpc.TextTransformChar.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWidthFrac(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDepth(value);
      break;
    case 3:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addColor(values[i]);
      }
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTextLongitudinalVelocityFactor(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTextLateralVelocityFactor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.grpc.TextTransformChar.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.grpc.TextTransformChar.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.grpc.TextTransformChar} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.TextTransformChar.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWidthFrac();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getDepth();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getColorList();
  if (f.length > 0) {
    writer.writePackedFloat(
      3,
      f
    );
  }
  f = message.getTextLongitudinalVelocityFactor();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getTextLateralVelocityFactor();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
};


/**
 * optional float width_frac = 1;
 * @return {number}
 */
proto.proto.grpc.TextTransformChar.prototype.getWidthFrac = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.grpc.TextTransformChar} returns this
 */
proto.proto.grpc.TextTransformChar.prototype.setWidthFrac = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float depth = 2;
 * @return {number}
 */
proto.proto.grpc.TextTransformChar.prototype.getDepth = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.grpc.TextTransformChar} returns this
 */
proto.proto.grpc.TextTransformChar.prototype.setDepth = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * repeated float color = 3;
 * @return {!Array<number>}
 */
proto.proto.grpc.TextTransformChar.prototype.getColorList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.proto.grpc.TextTransformChar} returns this
 */
proto.proto.grpc.TextTransformChar.prototype.setColorList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.proto.grpc.TextTransformChar} returns this
 */
proto.proto.grpc.TextTransformChar.prototype.addColor = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.grpc.TextTransformChar} returns this
 */
proto.proto.grpc.TextTransformChar.prototype.clearColorList = function() {
  return this.setColorList([]);
};


/**
 * optional float text_longitudinal_velocity_factor = 4;
 * @return {number}
 */
proto.proto.grpc.TextTransformChar.prototype.getTextLongitudinalVelocityFactor = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.grpc.TextTransformChar} returns this
 */
proto.proto.grpc.TextTransformChar.prototype.setTextLongitudinalVelocityFactor = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float text_lateral_velocity_factor = 5;
 * @return {number}
 */
proto.proto.grpc.TextTransformChar.prototype.getTextLateralVelocityFactor = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.grpc.TextTransformChar} returns this
 */
proto.proto.grpc.TextTransformChar.prototype.setTextLateralVelocityFactor = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.grpc.TextTransformParameters.repeatedFields_ = [100];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.grpc.TextTransformParameters.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.grpc.TextTransformParameters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.grpc.TextTransformParameters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.TextTransformParameters.toObject = function(includeInstance, msg) {
  var f, obj = {
    bpm: jspb.Message.getFieldWithDefault(msg, 1, 0),
    transparency: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    fixedWidth: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    spacing: jspb.Message.getFieldWithDefault(msg, 4, 0),
    backgroundColor: (f = msg.getBackgroundColor()) && proto.proto.grpc.Color.toObject(includeInstance, f),
    textLateralVelocityIntervalSeconds: jspb.Message.getFieldWithDefault(msg, 6, 0),
    strobeEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    strobeDuration: jspb.Message.getFieldWithDefault(msg, 8, 0),
    charList: jspb.Message.toObjectList(msg.getCharList(),
    proto.proto.grpc.TextTransformChar.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.grpc.TextTransformParameters}
 */
proto.proto.grpc.TextTransformParameters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.grpc.TextTransformParameters;
  return proto.proto.grpc.TextTransformParameters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.grpc.TextTransformParameters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.grpc.TextTransformParameters}
 */
proto.proto.grpc.TextTransformParameters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBpm(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTransparency(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFixedWidth(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSpacing(value);
      break;
    case 5:
      var value = new proto.proto.grpc.Color;
      reader.readMessage(value,proto.proto.grpc.Color.deserializeBinaryFromReader);
      msg.setBackgroundColor(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTextLateralVelocityIntervalSeconds(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStrobeEnabled(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStrobeDuration(value);
      break;
    case 100:
      var value = new proto.proto.grpc.TextTransformChar;
      reader.readMessage(value,proto.proto.grpc.TextTransformChar.deserializeBinaryFromReader);
      msg.addChar(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.grpc.TextTransformParameters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.grpc.TextTransformParameters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.grpc.TextTransformParameters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.TextTransformParameters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBpm();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTransparency();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getFixedWidth();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getSpacing();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getBackgroundColor();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.proto.grpc.Color.serializeBinaryToWriter
    );
  }
  f = message.getTextLateralVelocityIntervalSeconds();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getStrobeEnabled();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getStrobeDuration();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getCharList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      100,
      f,
      proto.proto.grpc.TextTransformChar.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 bpm = 1;
 * @return {number}
 */
proto.proto.grpc.TextTransformParameters.prototype.getBpm = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.grpc.TextTransformParameters} returns this
 */
proto.proto.grpc.TextTransformParameters.prototype.setBpm = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool transparency = 2;
 * @return {boolean}
 */
proto.proto.grpc.TextTransformParameters.prototype.getTransparency = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.grpc.TextTransformParameters} returns this
 */
proto.proto.grpc.TextTransformParameters.prototype.setTransparency = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool fixed_width = 3;
 * @return {boolean}
 */
proto.proto.grpc.TextTransformParameters.prototype.getFixedWidth = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.grpc.TextTransformParameters} returns this
 */
proto.proto.grpc.TextTransformParameters.prototype.setFixedWidth = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional int32 spacing = 4;
 * @return {number}
 */
proto.proto.grpc.TextTransformParameters.prototype.getSpacing = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.grpc.TextTransformParameters} returns this
 */
proto.proto.grpc.TextTransformParameters.prototype.setSpacing = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional Color background_color = 5;
 * @return {?proto.proto.grpc.Color}
 */
proto.proto.grpc.TextTransformParameters.prototype.getBackgroundColor = function() {
  return /** @type{?proto.proto.grpc.Color} */ (
    jspb.Message.getWrapperField(this, proto.proto.grpc.Color, 5));
};


/**
 * @param {?proto.proto.grpc.Color|undefined} value
 * @return {!proto.proto.grpc.TextTransformParameters} returns this
*/
proto.proto.grpc.TextTransformParameters.prototype.setBackgroundColor = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.grpc.TextTransformParameters} returns this
 */
proto.proto.grpc.TextTransformParameters.prototype.clearBackgroundColor = function() {
  return this.setBackgroundColor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.grpc.TextTransformParameters.prototype.hasBackgroundColor = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 text_lateral_velocity_interval_seconds = 6;
 * @return {number}
 */
proto.proto.grpc.TextTransformParameters.prototype.getTextLateralVelocityIntervalSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.grpc.TextTransformParameters} returns this
 */
proto.proto.grpc.TextTransformParameters.prototype.setTextLateralVelocityIntervalSeconds = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bool strobe_enabled = 7;
 * @return {boolean}
 */
proto.proto.grpc.TextTransformParameters.prototype.getStrobeEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.grpc.TextTransformParameters} returns this
 */
proto.proto.grpc.TextTransformParameters.prototype.setStrobeEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional int32 strobe_duration = 8;
 * @return {number}
 */
proto.proto.grpc.TextTransformParameters.prototype.getStrobeDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.grpc.TextTransformParameters} returns this
 */
proto.proto.grpc.TextTransformParameters.prototype.setStrobeDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * repeated TextTransformChar char = 100;
 * @return {!Array<!proto.proto.grpc.TextTransformChar>}
 */
proto.proto.grpc.TextTransformParameters.prototype.getCharList = function() {
  return /** @type{!Array<!proto.proto.grpc.TextTransformChar>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.grpc.TextTransformChar, 100));
};


/**
 * @param {!Array<!proto.proto.grpc.TextTransformChar>} value
 * @return {!proto.proto.grpc.TextTransformParameters} returns this
*/
proto.proto.grpc.TextTransformParameters.prototype.setCharList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 100, value);
};


/**
 * @param {!proto.proto.grpc.TextTransformChar=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.grpc.TextTransformChar}
 */
proto.proto.grpc.TextTransformParameters.prototype.addChar = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 100, opt_value, proto.proto.grpc.TextTransformChar, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.grpc.TextTransformParameters} returns this
 */
proto.proto.grpc.TextTransformParameters.prototype.clearCharList = function() {
  return this.setCharList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.grpc.FractalTunnelOrbitConstraints.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.grpc.FractalTunnelOrbitConstraints.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.grpc.FractalTunnelOrbitConstraints} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.FractalTunnelOrbitConstraints.toObject = function(includeInstance, msg) {
  var f, obj = {
    aMin: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    aMax: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    bMin: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    bMax: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    cMin: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    cMax: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    dMin: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    dMax: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    eMin: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    eMax: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.grpc.FractalTunnelOrbitConstraints}
 */
proto.proto.grpc.FractalTunnelOrbitConstraints.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.grpc.FractalTunnelOrbitConstraints;
  return proto.proto.grpc.FractalTunnelOrbitConstraints.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.grpc.FractalTunnelOrbitConstraints} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.grpc.FractalTunnelOrbitConstraints}
 */
proto.proto.grpc.FractalTunnelOrbitConstraints.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAMin(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAMax(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBMin(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBMax(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCMin(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCMax(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDMin(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDMax(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setEMin(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setEMax(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.grpc.FractalTunnelOrbitConstraints.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.grpc.FractalTunnelOrbitConstraints.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.grpc.FractalTunnelOrbitConstraints} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.FractalTunnelOrbitConstraints.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAMin();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getAMax();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getBMin();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getBMax();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getCMin();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getCMax();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getDMin();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getDMax();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getEMin();
  if (f !== 0.0) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = message.getEMax();
  if (f !== 0.0) {
    writer.writeFloat(
      10,
      f
    );
  }
};


/**
 * optional float a_min = 1;
 * @return {number}
 */
proto.proto.grpc.FractalTunnelOrbitConstraints.prototype.getAMin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.grpc.FractalTunnelOrbitConstraints} returns this
 */
proto.proto.grpc.FractalTunnelOrbitConstraints.prototype.setAMin = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float a_max = 2;
 * @return {number}
 */
proto.proto.grpc.FractalTunnelOrbitConstraints.prototype.getAMax = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.grpc.FractalTunnelOrbitConstraints} returns this
 */
proto.proto.grpc.FractalTunnelOrbitConstraints.prototype.setAMax = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float b_min = 3;
 * @return {number}
 */
proto.proto.grpc.FractalTunnelOrbitConstraints.prototype.getBMin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.grpc.FractalTunnelOrbitConstraints} returns this
 */
proto.proto.grpc.FractalTunnelOrbitConstraints.prototype.setBMin = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float b_max = 4;
 * @return {number}
 */
proto.proto.grpc.FractalTunnelOrbitConstraints.prototype.getBMax = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.grpc.FractalTunnelOrbitConstraints} returns this
 */
proto.proto.grpc.FractalTunnelOrbitConstraints.prototype.setBMax = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float c_min = 5;
 * @return {number}
 */
proto.proto.grpc.FractalTunnelOrbitConstraints.prototype.getCMin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.grpc.FractalTunnelOrbitConstraints} returns this
 */
proto.proto.grpc.FractalTunnelOrbitConstraints.prototype.setCMin = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float c_max = 6;
 * @return {number}
 */
proto.proto.grpc.FractalTunnelOrbitConstraints.prototype.getCMax = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.grpc.FractalTunnelOrbitConstraints} returns this
 */
proto.proto.grpc.FractalTunnelOrbitConstraints.prototype.setCMax = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional float d_min = 7;
 * @return {number}
 */
proto.proto.grpc.FractalTunnelOrbitConstraints.prototype.getDMin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.grpc.FractalTunnelOrbitConstraints} returns this
 */
proto.proto.grpc.FractalTunnelOrbitConstraints.prototype.setDMin = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional float d_max = 8;
 * @return {number}
 */
proto.proto.grpc.FractalTunnelOrbitConstraints.prototype.getDMax = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.grpc.FractalTunnelOrbitConstraints} returns this
 */
proto.proto.grpc.FractalTunnelOrbitConstraints.prototype.setDMax = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional float e_min = 9;
 * @return {number}
 */
proto.proto.grpc.FractalTunnelOrbitConstraints.prototype.getEMin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.grpc.FractalTunnelOrbitConstraints} returns this
 */
proto.proto.grpc.FractalTunnelOrbitConstraints.prototype.setEMin = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional float e_max = 10;
 * @return {number}
 */
proto.proto.grpc.FractalTunnelOrbitConstraints.prototype.getEMax = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.grpc.FractalTunnelOrbitConstraints} returns this
 */
proto.proto.grpc.FractalTunnelOrbitConstraints.prototype.setEMax = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.grpc.FractalTunnelParameters.repeatedFields_ = [20,21,22];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.grpc.FractalTunnelParameters.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.grpc.FractalTunnelParameters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.grpc.FractalTunnelParameters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.FractalTunnelParameters.toObject = function(includeInstance, msg) {
  var f, obj = {
    a: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    b: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    c: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    d: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    e: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    speed: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    rotationSpeed: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    levelHueList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 20)) == null ? undefined : f,
    levelBrightnessList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 21)) == null ? undefined : f,
    levelSaturationList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 22)) == null ? undefined : f,
    orbitConstraints: (f = msg.getOrbitConstraints()) && proto.proto.grpc.FractalTunnelOrbitConstraints.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.grpc.FractalTunnelParameters}
 */
proto.proto.grpc.FractalTunnelParameters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.grpc.FractalTunnelParameters;
  return proto.proto.grpc.FractalTunnelParameters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.grpc.FractalTunnelParameters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.grpc.FractalTunnelParameters}
 */
proto.proto.grpc.FractalTunnelParameters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setA(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setB(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setC(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setD(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setE(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSpeed(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRotationSpeed(value);
      break;
    case 20:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addLevelHue(values[i]);
      }
      break;
    case 21:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addLevelBrightness(values[i]);
      }
      break;
    case 22:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addLevelSaturation(values[i]);
      }
      break;
    case 100:
      var value = new proto.proto.grpc.FractalTunnelOrbitConstraints;
      reader.readMessage(value,proto.proto.grpc.FractalTunnelOrbitConstraints.deserializeBinaryFromReader);
      msg.setOrbitConstraints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.grpc.FractalTunnelParameters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.grpc.FractalTunnelParameters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.grpc.FractalTunnelParameters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.grpc.FractalTunnelParameters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getA();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getB();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getC();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getD();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getE();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getSpeed();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getRotationSpeed();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getLevelHueList();
  if (f.length > 0) {
    writer.writePackedFloat(
      20,
      f
    );
  }
  f = message.getLevelBrightnessList();
  if (f.length > 0) {
    writer.writePackedFloat(
      21,
      f
    );
  }
  f = message.getLevelSaturationList();
  if (f.length > 0) {
    writer.writePackedFloat(
      22,
      f
    );
  }
  f = message.getOrbitConstraints();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto.proto.grpc.FractalTunnelOrbitConstraints.serializeBinaryToWriter
    );
  }
};


/**
 * optional float a = 1;
 * @return {number}
 */
proto.proto.grpc.FractalTunnelParameters.prototype.getA = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.grpc.FractalTunnelParameters} returns this
 */
proto.proto.grpc.FractalTunnelParameters.prototype.setA = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float b = 2;
 * @return {number}
 */
proto.proto.grpc.FractalTunnelParameters.prototype.getB = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.grpc.FractalTunnelParameters} returns this
 */
proto.proto.grpc.FractalTunnelParameters.prototype.setB = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float c = 3;
 * @return {number}
 */
proto.proto.grpc.FractalTunnelParameters.prototype.getC = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.grpc.FractalTunnelParameters} returns this
 */
proto.proto.grpc.FractalTunnelParameters.prototype.setC = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float d = 4;
 * @return {number}
 */
proto.proto.grpc.FractalTunnelParameters.prototype.getD = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.grpc.FractalTunnelParameters} returns this
 */
proto.proto.grpc.FractalTunnelParameters.prototype.setD = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float e = 5;
 * @return {number}
 */
proto.proto.grpc.FractalTunnelParameters.prototype.getE = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.grpc.FractalTunnelParameters} returns this
 */
proto.proto.grpc.FractalTunnelParameters.prototype.setE = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float speed = 7;
 * @return {number}
 */
proto.proto.grpc.FractalTunnelParameters.prototype.getSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.grpc.FractalTunnelParameters} returns this
 */
proto.proto.grpc.FractalTunnelParameters.prototype.setSpeed = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional float rotation_speed = 8;
 * @return {number}
 */
proto.proto.grpc.FractalTunnelParameters.prototype.getRotationSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.grpc.FractalTunnelParameters} returns this
 */
proto.proto.grpc.FractalTunnelParameters.prototype.setRotationSpeed = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * repeated float level_hue = 20;
 * @return {!Array<number>}
 */
proto.proto.grpc.FractalTunnelParameters.prototype.getLevelHueList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 20));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.proto.grpc.FractalTunnelParameters} returns this
 */
proto.proto.grpc.FractalTunnelParameters.prototype.setLevelHueList = function(value) {
  return jspb.Message.setField(this, 20, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.proto.grpc.FractalTunnelParameters} returns this
 */
proto.proto.grpc.FractalTunnelParameters.prototype.addLevelHue = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 20, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.grpc.FractalTunnelParameters} returns this
 */
proto.proto.grpc.FractalTunnelParameters.prototype.clearLevelHueList = function() {
  return this.setLevelHueList([]);
};


/**
 * repeated float level_brightness = 21;
 * @return {!Array<number>}
 */
proto.proto.grpc.FractalTunnelParameters.prototype.getLevelBrightnessList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 21));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.proto.grpc.FractalTunnelParameters} returns this
 */
proto.proto.grpc.FractalTunnelParameters.prototype.setLevelBrightnessList = function(value) {
  return jspb.Message.setField(this, 21, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.proto.grpc.FractalTunnelParameters} returns this
 */
proto.proto.grpc.FractalTunnelParameters.prototype.addLevelBrightness = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 21, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.grpc.FractalTunnelParameters} returns this
 */
proto.proto.grpc.FractalTunnelParameters.prototype.clearLevelBrightnessList = function() {
  return this.setLevelBrightnessList([]);
};


/**
 * repeated float level_saturation = 22;
 * @return {!Array<number>}
 */
proto.proto.grpc.FractalTunnelParameters.prototype.getLevelSaturationList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 22));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.proto.grpc.FractalTunnelParameters} returns this
 */
proto.proto.grpc.FractalTunnelParameters.prototype.setLevelSaturationList = function(value) {
  return jspb.Message.setField(this, 22, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.proto.grpc.FractalTunnelParameters} returns this
 */
proto.proto.grpc.FractalTunnelParameters.prototype.addLevelSaturation = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 22, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.grpc.FractalTunnelParameters} returns this
 */
proto.proto.grpc.FractalTunnelParameters.prototype.clearLevelSaturationList = function() {
  return this.setLevelSaturationList([]);
};


/**
 * optional FractalTunnelOrbitConstraints orbit_constraints = 100;
 * @return {?proto.proto.grpc.FractalTunnelOrbitConstraints}
 */
proto.proto.grpc.FractalTunnelParameters.prototype.getOrbitConstraints = function() {
  return /** @type{?proto.proto.grpc.FractalTunnelOrbitConstraints} */ (
    jspb.Message.getWrapperField(this, proto.proto.grpc.FractalTunnelOrbitConstraints, 100));
};


/**
 * @param {?proto.proto.grpc.FractalTunnelOrbitConstraints|undefined} value
 * @return {!proto.proto.grpc.FractalTunnelParameters} returns this
*/
proto.proto.grpc.FractalTunnelParameters.prototype.setOrbitConstraints = function(value) {
  return jspb.Message.setWrapperField(this, 100, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.grpc.FractalTunnelParameters} returns this
 */
proto.proto.grpc.FractalTunnelParameters.prototype.clearOrbitConstraints = function() {
  return this.setOrbitConstraints(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.grpc.FractalTunnelParameters.prototype.hasOrbitConstraints = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * @enum {number}
 */
proto.proto.grpc.Font = {
  MOTOYALMARU_W3_MONO: 0,
  LYNO_WALT_REGULAR: 1,
  LYNO_JEAN_REGULAR: 2,
  LYNO_STAN_REGULAR: 3,
  LYNO_ULYS_REGULAR: 4,
  INTER_EXTRA_BOLD_REGULAR: 5
};

goog.object.extend(exports, proto.proto.grpc);
